- block:
  - set_fact:
      title: "manage image {{ lookup('vars', image).name }} -"

  - name: "{{ title }} process image"
    debug:
      msg: "image:\n{{ lookup('vars', image) | to_nice_yaml}}"
    when: "'debug' in ansible_run_tags"
      
  - name: "{{ title }} assert variables"
    vars:
      i: "{{ lookup('vars', image) }}"
    ansible.builtin.assert:
      that:
        - i.type is defined
        - i.section is defined
        - i.tag is defined
        - i.type != 'fetch'  or i.source is defined
        - i.type != 'script' or i.command is defined
        - i.type != 'script' or i.name is defined

  - set_fact:
      t: "{{ lookup('vars', image) }}"
      var_stack: "{{ (var_stack | default([])) + [image] }}"

  - debug:
      msg: "t:{{ t }}\nvar_stack:\n{{ var_stack | to_nice_yaml}}\nimage:\n{{image | to_nice_yaml }}\n"
    when: "'debug' in ansible_run_tags"

  - block:
    - name: "{{ title }} handle required base images"
      include_tasks: common/image.yaml
      vars:
        image: "{{ 'loop_'~t.name }}"
      loop: "{{ images | selectattr('name', 'defined') | selectattr('name', 'in', t.requires|default([]) ) }}"
      loop_control:
        loop_var: "{{ 'loop_'~t.name }}"
  
  - name: "recursion end - set vars to complete the upstream image"
    set_fact:
      image_var: "{{ var_stack[-1] }}"
      title: "manage image {{ lookup('vars', var_stack[-1]).name }} -"
      var_stack: "{{ var_stack[0:-1] }}"
      image_info: "{{ lookup('vars', var_stack[-1]) }}"

- name: "{{ title }} check for builder image availability"
  shell: |
    podman image inspect --format " " {{ image_info.section }}/{{ kubler.default_builder }}-{{ image_info.name }}:{{ image_info.tag }} 2>&1
  failed_when: false
  register: check_builder

- name: "{{ title }} check if image exists already"
  uri:
    url: "https://{{ registry }}/v2/{{ image_info.section }}/{{ image_info.name }}/manifests/{{ image_info.tag | default('latest') }}"
    headers:
      Accept: application/vnd.oci.image.manifest.v1+json
    method: "GET"
  register: check_image
  when: "'no_exists_check' not in ansible_run_tags"
  failed_when: false

- debug:
    msg: "check_image type: {{ check_image.status | type_debug }}\n{{ check_image | to_nice_yaml }}\nimages_processed:\n{{ images_processed | to_nice_yaml }}"
  when: "'debug' in ansible_run_tags"

- block: # build something
  - block: # kubler
    - name: "{{ title }} variables - 1"
      set_fact:
        requires: "{{ image_info.requires | default(['core'])| first }}" # as scratch should be the only image without requires attribute
        dest_dir: "{{ kubler.base }}/{{ image_info.section }}/{{ image_info.name }}"
        build_dir: "{{ kubler.base }}/build"
        portage_image: "{{ kubler.build_dir }}/portage:{{ kubler.portage }}"
        stage3_image: "{{ kubler.build_dir }}/{{ kubler.stage3_base }}:{{ kubler.stage3_date }}"
        stage3_url: "https://distfiles.gentoo.org/releases/{{ default_platform }}/autobuilds/{{ kubler.stage3_date }}/"
        stage3_file: "{{ kubler.stage3_base }}-{{ kubler.stage3_date }}.tar.xz"
        core_builder: "{{ kubler.build_dir }}/{{ kubler.default_builder }}-core:{{ kubler.portage }}" 
        scratch_builder: "build/{{ kubler.default_builder }}-scratch:{{ kubler.portage }}"

    - name: "{{ title }} variables - 2"
      set_fact:
        build_container: "rootfs-builder-{{ image_info.section }}-{{ image_info.name }}"
        build_image: "{{ registry }}/{{ image_info.section }}/{{ image_info.name }}:{{ image_info.tag }}"
        req_section: "{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', requires ) | map(attribute='section') | first| default('build')}}"
        req_tag: "{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', requires ) | map(attribute='tag') |first | default(kubler.portage)}}"
    - name: "{{ title }} directories"
      file:
        path: "{{ item }}"
        recurse: true
        state: directory
      loop:
      - "{{ dest_dir }}"
      - "{{ build_dir }}"
    - name: "{{ title }} git clone kubler"
      shell: |
        if [ ! -d "kubler" ]; then git clone -b master --depth 1 "{{ kubler.git }}" kubler; else (cd kubler; git pull); fi  
      args:
        chdir: "{{ kubler.base }}"

    - block: # check only when image_info.name == 'scratch'
      # portage
      - name: "{{ title }} check for portage image availability"
        shell: |
          podman image inspect --format " " {{ portage_image }} 2>&1
        failed_when: false
        register: check_portage
        
      - block:
        - name: "{{ title }} get portage"
          get_url:
            url: https://distfiles.gentoo.org/snapshots/portage-{{ kubler.portage }}.tar.xz
            dest: "{{ build_dir }}/"
        - name: "{{ title }} build portage image"
          shell: |
            cd {{ build_dir }}
            cat > "Dockerfile.portage" <<EOF
            FROM local/base AS builder
            COPY ./portage-{{ kubler.portage }}.tar.xz /
            RUN set -x && \
                mkdir -p /var/db/repos/ && \
                tar -xf /portage-{{ kubler.portage }}.tar.xz -C /var/db/repos && \
                mv /var/db/repos/portage /var/db/repos/gentoo && \
                mkdir -p /var/db/repos/gentoo/metadata
            FROM local/base
            COPY --from=builder /var/db/repos/gentoo /var/db/repos/gentoo
            VOLUME /var/db/repos /var/cache/eix
            EOF
            podman build -v {{ build_dir }}/portage-{{ kubler.portage }}.tar.xz:/portage-{{ kubler.portage }}.tar.xz --file Dockerfile.portage --tag {{ portage_image }}
            podman run --name {{ kubler.portage_container }} {{ portage_image }} true
        when: "check_portage.rc != 0"
        
      # stage3 
      - name: "{{ title }} check for stage3 image availability"
        shell: |
          podman image inspect --format " " {{ stage3_image }} 2>&1
        failed_when: false
        register: check_stage3
        
      - block:
        - name: "{{ title }} get stage3"
          get_url:
            url: "{{ stage3_url }}/{{ stage3_file }}"
            dest: "{{ build_dir }}/"
        - name: "{{ title }} build stage3 image"
          shell: |
            podman import "{{ build_dir }}/{{ stage3_file }}" {{ stage3_image }}
        when: "check_stage3.rc != 0 or check_portage.rc != 0"
        
      # core builder
      - name: "{{ title }} check for core builder image availability"
        shell: |
          podman image inspect --format " " {{ core_builder }} 2>&1
        failed_when: false
        register: check_core
        
      - block:
        - name: "{{ title }} build core builder image"
          shell: |
            cd {{ build_dir }}
            cp -rdp "{{ kubler.base }}/kubler/engine/docker/bob-core"/* .
            . {{ kubler.base }}/kubler/engine/docker.sh
            BOB_CURRENT_STAGE3_ID="{{ stage3_image }}" BOB_CHOST='{{ kubler.chost }}' BOB_BUILDER_CHOST='{{ kubler.chost }}' generate_dockerfile {{ build_dir }}
            mv Dockerfile Dockerfile.core
            podman build --file Dockerfile.core --tag {{ core_builder }}
        when: "check_core.rc != 0 or check_stage3.rc != 0 or check_portage.rc != 0"
        
      # scratch builder
      - name: "{{ title }} check for scratch builder image availability"
        shell: |
          podman image inspect --format " " {{ scratch_builder }} 2>&1
        failed_when: false
        register: check_scratch
      when: image_info.name == 'scratch'

    - name: "{{ title }} create Dockerfile.template"
      vars:
        entrypoint: "{{ image_info.build.entrypoint }}"
        user: "{{ image_info.build.user }}"
        workdir: "{{ image_info.workdir }}"
        env: "{{ image_info.env }}"
      shell: |
        cat > "{{ dest_dir }}/Dockerfile.template" <<"EOF"
        FROM ${IMAGE_PARENT}
        LABEL maintainer="${MAINTAINER}"
        ADD rootfs.tar /
        {% if env is defined -%}
        {% for e in env %}
        ENV {{ e }}="{{ env[e] }}"
        {% endfor %}
        {% endif %}
        {% if workdir is defined -%}
        WORKDIR "{{ workdir }}"
        {% endif %}
        {% if user is defined -%}
        USER "{{ user }}"
        {% endif %}
        {% if entrypoint is defined -%}
        ENTRYPOINT ["{{ entrypoint | join('","') }}"]
        {% endif %}
        EOF
    - name: "{{ title }} create build.sh"
      vars:
        build_sh: "{{ dest_dir }}/build.sh"
      shell: |
        echo '_packages="{{ image_info.build.packages | default('') }}"' > "{{ build_sh }}"
        
        cat >> "{{ build_sh }}" <<"INLINE"
        configure_builder(){
          {{ image_info.build.configure_builder | default('true') }}
        }
        INLINE
        
        cat >> "{{ build_sh }}" <<"INLINE"
        configure_rootfs_build(){
          {{ image_info.build.configure_rootfs_build | default('true') }}
        }
        INLINE
        
        echo 'finish_rootfs_build(){ 
          {{ image_info.build.finish_rootfs_build | default('true') }}
        }' >> "{{ build_sh }}"

    - block:
      - name: "{{ title }} build content"
        shell: >-
          podman run --replace --name {{ build_container }} --volumes-from {{ kubler.portage_container }}
          -v {{ dest_dir }}/:/config -v {{ kubler.base }}/data/distfiles:/distfiles -v {{ kubler.base }}/data/packages:/packages 
          -e BOB_BUILDER_CHOST={{ kubler.chost }} -e BOB_CHOST={{ kubler.chost }} -e BOB_CURRENT_STAGE3_ID={{ stage3_image }}  
          -e BOB_EMERGE_DEFAULT_OPTS="-b -k --binpkg-respect-use=y --quiet-build" -e BOB_EMERGE_OPT="-v --tree" 
          -e BOB_FEATURES="-parallel-fetch nodoc noinfo noman binpkg-multi-instance -ipc-sandbox -network-sandbox -pid-sandbox" -e BOB_GENTOO_MIRRORS=http://distfiles.gentoo.org/ 
          -e BOB_HOST_GID=0 -e BOB_HOST_UID=0 -e BOB_IS_DEBUG=false -e BOB_MAKEOPTS=-j4 -e BOB_TIMEZONE=UTC 
          -e BOB_CURRENT_TARGET="{{ build_image }}"
          {{ req_section }}/{{ kubler.default_builder }}-{{ requires }}:{{ req_tag }} kubler-build-root

      - name: "{{ title }} commit build container to image"
        shell: >-
          podman commit --squash {{ build_container }} {{ image_info.section }}/{{ kubler.default_builder }}-{{ image_info.name }}:{{ image_info.tag }}

      - block: 
        - name: "{{ title }} generate Dockerfile"
          shell: |
            . {{ kubler.base }}/kubler/engine/docker.sh
            IMAGE_PARENT="{% if requires == 'scratch' %}scratch{% else %}{{ registry }}/{{ req_section }}/{{ requires }}:{{ req_tag }}{% endif %}" generate_dockerfile {{ dest_dir }}
        - name: "{{ title }} build image"
          shell: >-
            podman build -t {{ build_image }} {{ dest_dir }} 
        - name: "{{ title }} push to registry"
          shell: |
            podman push {{ build_image }}
        when: "image_info.name != 'scratch'"
      when: "image_info.name != 'scratch' or check_core.rc != 0 or check_stage3.rc != 0 or check_portage.rc != 0 or check_scratch.rc != 0"
    when: image_info.type == 'kubler'
  
  - block:
    - name: "{{ title }} fetch image from registry and push to local registry"
      shell: |
        set -x
        echo "{{ platform | default(default_platform) }} {{ image_info.source }}:{{ image_info.tag | default('latest') }} {{ image_info.section }}" | pull-tag-push.sh
      register: image2local
    - debug: var=image2local
      failed_when: false
    when: image_info.type == 'fetch'
  
  - block:
    - name: "{{ title }} tempdir for build"
      tempfile:
        path: "{{ remote_temp }}"
        state: directory
        suffix: "-build-image"
      register: build_dir
    - set_fact:
        templates_dirs:  "{{ lookup('pipe', '[ ! -d \"'+ image_build_sources +'\" ] || find \"'+ image_build_sources +'\"   -type d').split('\n')|reject('match', '^$')  }}"
        templates_files: "{{ lookup('pipe', '[ ! -d \"'+ image_build_sources +'\" ] || find \"'+ image_build_sources +'\" ! -type d').split('\n')|reject('match', '^$')  }}"
    - name: "{{ title }} ensure destination directory exists for templates"
      file:
        path: "{{ build_dir }}{{ item | replace (image_build_sources,'') }}"
        recurse: true
        state: directory
      loop: "{{ templates_dirs }}"
    - name: "{{ title }} create config from templates"
      template:
        src: "{{ item }}"
        dest: "{{ build_dir }}/{{ item | replace( image_build_sources , '') }}"
      loop: "{{ templates_files }}"
    - name: "{{ title }} build image"
      shell: |
        set -xe
        image="{{ registry }}/{{ image_info.section }}/{{ image_info.name }}:{{ image_info.tag | default('latest') }}"
        {{ image_info.command }}
      args:
        chdir: "{{ build_dir.path }}"
      register: build_out
    
    - debug: var=build_out
      failed_when: false
    when: image_info.type == 'script'
  when: "'status' not in check_image.keys() or (check_image is defined and 'status' in check_image.keys() and check_image.status != 200 and image_info.name != 'scratch') or (image_info.type == 'kubler' and check_builder.rc != 0)"
  
- name: "{{ title }} record image as processed"
  set_fact:
    images_processed: "{{ images_processed + [image_info.name] }}"  
