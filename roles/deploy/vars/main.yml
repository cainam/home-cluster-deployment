---
applications:
  gateway:
    traefik:
      deployment_type: kustomize
      kustom:
        ports:
          traefik: 13579
      images:
      - traefik
      storage:
      - name: traefik-plugins
        size: 5Mi
        type: local_folder
        config: true
  istio-system:
    base: 
      git: https://github.com/istio/istio.git
      branch: "{{ software.istio.version }}"
      subdir: manifests/charts/base
    istiod: 
      git: https://github.com/istio/istio.git
      branch: "{{ software.istio.version }}"
      subdir: manifests/charts/istio-control/istio-discovery
      helm_options: --set global.proxy.privileged=true --set global.tracing.zipkin.address=jaeger-collector.tools:9411 --set pilot.resources.requests.memory=164Mi --set global.proxy.image=istio-system/proxyv2:"{{ software.istio.version }}-gentoo" --set global.proxy_init.image=istio-system/proxyv2:"{{ software.istio.version }}-gentoo"
      git_to_local_params: --fix_source=.pilot.image=istio/pilot:"{{ software.istio.version }}" --fix_source=.global.proxy.image=istio/proxyv2:"{{ software.istio.version }}" --fix_source=.global.proxy_init.image=istio/proxyv2:"{{ software.istio.version }}"
      vars:
        oauth2_proxy: "oauth2-proxy"
      files:
        values:
          file: istiod-mesh.yaml
    istiod-config:
      deployment_type: kustomize
  auth:
    ory-commons:
      git: https://github.com/ory/k8s.git
      subdir: helm/charts/ory-commons
      install: false
    hydra:
      git: https://github.com/ory/k8s.git
      subdir: helm/charts/hydra
      git_to_local_params: --fix_source=.watcher.image= --fix_source=.test.busybox.repository= --fix_source=.image.tag= --fix_source=.image.repository=
      helm_options_for_memory: --set hydra.config.dsn=memory
      helm_options_for_presistent_storage: --set hydra.config.dsn=sqlite:///data/hydra.sqlite?_fk=true --set deployment.extraVolumeMounts[0].name=hydra --set deployment.extraVolumeMounts[0].mountPath=/data --set deployment.extraVolumes[0].name=hydra --set deployment.extraVolumes[0].persistentVolumeClaim.claimName=hydra --set hydra.automigration.type=initContainer --set hydra.automigration.enabled=true 
      helm_options: >-
        --set hydra.config.dsn=memory 
        --set image.repository=auth/hydra --set image.tag="{{ software.hydra.version }}"
      remove_dependencies: hydra-maester
      requires:
      - type: default
        name: hydra-config
        namespace: auth
      images:
      - hydra
      files:
        values:
          file: hydra-config.yaml
      storage:
      - name: hydra
        size: 5Mi 
      network:
        svcPort: 4444
        svcName: hydra-public
        prefix: /hydra
    auth-operator: # only valid with hydra.config.dsn=sqlite:///data/hydra.sqlite?_fk=true or =memory
      deployment_type: kustomize
      images:
      - auth-operator
      storage:
      - name: auth-operator
        size: 2Mi
        type: local_folder
        config: true
    idp:
      deployment_type: kustomize
      images:
      - idp
      network: true
    oauth2-proxy:
      deployment_type: kustomize
      images:
      - oauth2-proxy
      network:
        svcPort: 80
        prefix: /oauth2-hydra
        rewrite: /oauth2-hydra/
  home:
    grott:
      git: "{{ own_git_url }}"
      subdir: charts/grott
    zigbee2mqtt:
      deployment_type: kustomize
      affinity: k8s-2-int.adm13
      images:
      - zigbee2mqtt
      network:
        rewrite: /zigbee2mqtt
        old_proxy_sidecar:
          app.kubernetes.io/instance: zigbee2mqtt
      storage:
      - name: zigbee2mqtt
        size: 100Mi
        config: true
    mosquitto:
      deployment_type: kustomize
      images:
      - mosquitto
      storage:
      - name: mosquitto
        size: 1Gi
    home-assistant:
      deployment_type: kustomize
      kustom:
        runAsGroup: "{{ applicationSecurity['home-assistant'].runAsGroup}}"
      images:
      - home-assistant
      storage:
      - name: home-assistant
        size: 100Mi
        config: true
      network:
        XsvcPort: 8123
        prefix: "/"
        domain: ha.my-lb.adm13
        old_proxy_sidecar: 
          app.kubernetes.io/instance: home-assistant
      requires:
      - type: postgresql
        name: postgres
        namespace: db
        config:
          database: ha
          username: ha
          password: same
  tools:
    infopage:
      deployment_type: kustomize
      kustom:
        image: "local/fastapi:{{ images | selectattr('name', 'equalto', 'fastapi') | map(attribute='tag') | first }}"
        internal_port: "{{ 65536|random(1024) }}"
      images:
      - fastapi
      network: true
      storage:
      - name: infopage
        size: 5Mi
        type: local_folder
        config: true
  db:
    postgresql:
      deployment_type: kustomize
      kustom:
        image: "db/postgresql:{{ software.postgresql.version }}"
        user: "{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='username') | first }}"
        pass: "{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='password') | first }}"
        trustedSubnet: "{{ k8s.podSubnet }}"
        runAs: "{{ lookup('pipe', 'id -u postgres') | int }}"
        dataPath: /var/lib/postgresql
        confPath: /conf
      images:
      - postgresql
      storage: 
      - name: data-postgresql-0
        type: longhorn
        size: 2Gi
    dbperf:
      git: https://github.com/cetic/helm-postgresql.git
      chart: postgresql
      helm_options: --set postgresql.username="{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='username') | first }}" --set postgresql.password="{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='password') | first }}"
      git_to_local_params: --fix_source=.image.tag={{ software.postgresql.version }} --fix_source=.volumePermissions.image.tag={{ software.postgresql.version }} --fix_source=.volumePermissions.image.repository=db/postgres
      storage: 
      - name: data-dbperf-postgresql-0
        size: 11Gi
  kubext:
    valmut:
      deployment_type: kustomize
      flags: ['certs']
      kustom:
        image: "{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'fastapi' ) | map(attribute='section') | first }}/fastapi:{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'fastapi' ) | map(attribute='tag') | first }}"
        podPort: 28382
      images:
      - fastapi
      storage:
      - name: valmut
        size: 5Mi
        type: local_folder
        config: true
      
    descheduler:
      git: https://github.com/kubernetes-sigs/descheduler.git
      subdir: charts/descheduler
      branch: "{{ software.descheduler.version }}"
      git_to_local_params: --fix_source=.image.tag= --fix_source=.image.repository= 
      images:
      - descheduler
      helm_options: >-
        --set deschedulerPolicy.strategies.RemoveDuplicates.enabled=false
        --set deschedulerPolicy.strategies.RemovePodsHavingTooManyRestarts.enabled=false 
        --set deschedulerPolicy.strategies.RemovePodsViolatingNodeTaints.enabled=false 
        --set deschedulerPolicy.strategies.RemovePodsViolatingNodeAffinity.enabled=false 
        --set deschedulerPolicy.strategies.RemovePodsViolatingInterPodAntiAffinity.enabled=false 
        --set deschedulerPolicy.strategies.RemovePodsViolatingTopologySpreadConstraint.enabled=false 
        --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.thresholds.cpu=50 
        --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.thresholds.memory=40 
        --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.targetThresholds.cpu=60  
        --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.targetThresholds.memory=43 
        --set cmdOptions.v=4 --set deschedulerPolicy.evictLocalStoragePods=true --set schedule="*/10 * * * *"
        --set image.tag={{ software.descheduler.version }}
        --set image.repository=kube-system/descheduler
    
  longhorn-system:
    longhorn:
      git: https://github.com/longhorn/longhorn.git
      subdir: chart
      branch: "{{ software.longhorn.version }}"
      lm_options: --set defaultSettings.defaultDataPath=/data/longhorn-1 --set defaultSettings.logLevel=Trace
      helm_options: --set defaultSettings.logLevel=Info --set csi.kubeletRootDir=/var/lib/kubelet/
      network:
        svcName: longhorn-frontend
        prefix: /longhorn
        svcPort: 80
        old_proxy_sidecar: 
         app: longhorn-ui
      storage:
      - name: longhorn-1
        type: local
        size: 30Gi
        mountpoint: /var/lib/longhorn
