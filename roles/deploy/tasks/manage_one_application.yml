- name: set app fact
  set_fact:
    name_prefix: "namespace:{{ namespace.key }} app:{{ application.key }} -"
    app: "{{ application.key }}"
    
- block:
  - block:
    - name: "{{ name_prefix }} handle additional images"
      vars:
        limit_images: "{{ application.value.images }}"
        default_section: "{{ namespace.key }}"
      include_role:
        name: gentoo-image-builder
    when: application.value.images is defined

  - block:
    - name: "{{ name_prefix }} build helm"
      shell: |
        . set_env.sh "{{ namespace.key }}"
        helm:from_git_to_local.sh --platform={{ application.value.platform | default(default_platform) }} \
        --git_source={{ application.value.git }} --git_subdir={{ application.value.subdir | default("") }} \
        --git_branch={{ application.value.branch | default("") }} --chart_version={{ application.value.chart_version | default("") }} \
        --appVersion={{ application.value.appVersion | default("") }} --remove_dependencies={{ application.value.remove_dependencies | default("") }} \
        {{ application.value.git_to_local_params | default("") }} 
      register: build_out
  
    - name: "{{ name_prefix }} build output"
      debug:
        msg: "{{ item }}"
      loop: "{{ build_out  | dict2items }}"
  
    - name: "{{ name_prefix }} helm repo refresh"
      shell: |
        . set_env.sh "{{ namespace.key }}"
        helm repo add {{ ns }} "{{ helm_repo_base }}{{ ns }}"
        helm repo index "${helm_repo_dir}" --url "${helm_url}"
        helm repo update
    when: (application.value.deployment_type| default("helm")) == "helm"
  when: "'build' in ansible_run_tags" 

- name: "{{ name_prefix }} files"
  include_tasks: files.yml
  loop: "{{ application.value.files | dict2items }}"
  loop_control:
    loop_var: file
  when: application.value.files is defined

- debug:
    msg: "k8s.mutate:{{k8s.mutate}}"
    
- name: "{{ name_prefix }} mutating config"
  shell: |
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: "{{ application.key }}"
      namespace: "{{ k8s.mutate.namespace }}"
    data:
      mutate: |
        {{ application.value.mutate | to_nice_yaml | indent(width=4) }}
    EOF
  when: application.value.mutate is defined

- block:
  - name: "{{ name_prefix }} create patch from mutatingwebhookconfiguration-istio-sidecar-injector.yaml"
    template:
      src: "mutatingwebhookconfiguration-istio-sidecar-injector.yaml"
      dest: "/tmp/hook-{{ item.key }}.yaml"
    loop: "{{ application.value.network.proxy_sidecar | dict2items() }}"

  - name: "{{ name_prefix }} apply patch "
    shell: |
      kubectl patch mutatingwebhookconfiguration istio-sidecar-injector --type=strategic --patch-file="/tmp/hook-{{ item.key }}.yaml"
    loop: "{{ application.value.network.proxy_sidecar | dict2items() }}"
  when: application.value.network.proxy_sidecar is defined

- block:
  - name: "{{ name_prefix }} install or upgrade"
    shell: |
      . set_env.sh "{{ namespace.key }}"
      set -x
       helm upgrade --install --reset-values --create-namespace -n {{ namespace.key }} {{ application.key }} {{ namespace.key }}/{{ application.value.chart | default(application.key) }} \
       {{ applications[namespace.key][application.key].helm_options | default('') }} \
       {% if application.value['files']['values']['file'] is defined %}  --values {{ applications[namespace.key][application.key]['files']['values']['tempfile'] }}  {% endif %}
    register: out
    when: "application.value.install | default(true)"
  when: (application.value.deployment_type| default("helm")) == "helm"

- block:
  - name: "{{ name_prefix }} certificates for internal service"
    vars:
      cert_var: "reg_cert"
      key_var: "reg_key"
      caBundle_var: "caBundle"
      ca_init: false
      ca_openssl_path: /data/mine/certs
      ca_common_name: FreeAsABird
      ca_country_name: XX
      ca_passphrase: "{{ cert_pass }}"
      ca_organization_name: FreeAsABird
      ca_organizational_unit_name: Anarchists
      ca_state_or_province_name: Some-State
      ca_email_address: a.b@c.de
      ca_requests:
      - name: "{%- if application.value.network is defined -%}{{ application.value.network.domain }}{%- else -%}{{ application.key }}.{{ namespace.key }}.svc{%- endif -%}"
        alt_names: "{%- if application.value.network is defined -%}{{ application.value.network.hosts }}{%- else -%}['{{ application.key }}.{{ namespace.key }}.svc']{%- endif -%}"
      #- name: "{{ application.key }}.{{ namespace.key }}.svc"
      #  alt_names: 
      #  - "{{ application.key }}.{{ namespace.key }}.svc"
    include_role: 
      name: certificates
    when: "'flags' in application.value and 'certs' in application.value.flags"

  - name: "{{ title }} - run helper to process kustomize templates"
    include_role:
      name: shared_helper
      tasks_from: template_directory.yaml
    vars:
      dir_var: build_dir
      template_source_dir: "{{ playbook_dir }}/common/kustomize/{{ application.value.kustom.application | default(application.key) }}"
      kustom: "{{ application.value.kustom | default({}) | combine({
         'namespace': namespace.key,
         'name': application.key, 
         'storage': application.value.storage | default({}),
         'network':  application.value.network | default({}),
         'image': application.value.kustom.image | default( namespace.key+'/'+application.key~':'~
            (software[application.key].version|default( images | selectattr('name', 'defined') | selectattr('name', 'equalto', application.key ) | map(attribute='tag')|first| default('latest')) ))
         }) }}"
  - name: "{{ name_prefix }} kustomize"
    vars:
      kustom: "{{ kustom | combine({'crt': reg_cert.content|b64decode, 'key': reg_key.content|b64decode }) }}"
    shell: |
      kubectl apply -k {{ build_dir }} --force-conflicts --server-side
  when: (application.value.deployment_type| default("helm")) == "kustomize"
  run_once: true
  
- block:
  - name: "{{ name_prefix }} manage application requirements"
    include_tasks: manage_application_requirements.yaml
    with_items: "{{ application.value.requires }}"
    loop_control:
      loop_var: requires
  when: application.value.requires is defined

- name: "{{ name_prefix }} undef application vars again"
  set_fact:
    "{{ item.key }}": !!null # "{{ undef() }}" doesn't work for facts, so nulling it instead
  loop: "{{ application.value.vars | dict2items }}"
  when: application.value.vars is defined
  
# traefik
- block:
  - name: "{{ name_prefix }} ingressroute"
    shell: | 
      kubectl apply -f - <<EOF
      apiVersion: traefik.io/v1alpha1
      kind: IngressRoute
      metadata:
        name: "{{ application.key }}-{{ item.name }}"
        namespace: gateway
      spec:
        entryPoints:
        - websecure
        routes:
        - kind: Rule
          match: Host("{% if item.name != 'ext' -%}traefik.{% endif -%}{{ item.domain }}") && PathPrefix("/{{ application.key }}/")
          middlewares:
          {% if item.name  == 'ext' -%}
          - name: redirect-rewriter
          {% endif -%}
          - name: oauth2-proxy
          - name: {{ application.key }}-stripprefix
          services:
          - name: {{ application.key }}
            namespace: {{ namespace.key }}
            port: {{ application.value.network.svcPort }}
        tls:
          secretName: certs
      EOF
    loop: "{{ net.routes }}"
    
  - name: "{{ name_prefix }} Middleware stripprefix"
    shell: | 
      kubectl apply -f - <<EOF
      apiVersion: traefik.io/v1alpha1
      kind: Middleware
      metadata:
        name: {{ application.key }}-stripprefix
        namespace: gateway
      spec:
        stripPrefix:
          prefixes:
          - /{{ application.key }}
      EOF
  when: application.value.network is defined and (net.routes | selectattr('domain','equalto',application.value.network.domain) | map(attribute='gateway') | first) == 'traefik'

# istio
- block:
  - name: "{{ name_prefix }} VirtualService(istio)"
    vars:
      gateway: "{{ application.value.network.domain|replace('.','-') }}"
    shell: | 
      kubectl apply --force --grace-period=0 -f - <<EOF
      apiVersion: networking.istio.io/v1
      kind: VirtualService
      metadata:
        name: {{ application.key }}
        namespace: {{ default_gateway_namespace }}
      spec:
        gateways:
         - {{ default_gateway_namespace }}/{{ gateway }}
        hosts:
        {% for host in application.value.network.hosts %}
        - {{ host }}
        {% endfor -%}
        http:
        - directResponse:
            status: 592
          match:
          - uri:
              prefix: /dummy
          name: dummy
        - match:
          - uri:
              prefix: {{ application.value.network.prefix~'/' }}
          - uri:
              exact: {{ application.value.network.prefix }}
          name: {{ application.key }}
          rewrite:
            uri: {{ application.value.network.rewrite }}
          route:
          - destination:
              host: "{{ application.value.network.svcName | default(application.key) }}.{{ namespace.key }}.svc.cluster.local"
              {% if application.value.network.svcPort is defined -%}
              port:
                number: {{ application.value.network.svcPort }} 
              {% endif %}

      EOF
  when: application.value.network is defined and (net.routes | selectattr('domain','equalto',application.value.network.domain) | map(attribute='gateway') | first) == 'istio'

- block:
  - name: "{{ name_prefix }} affinity - label node"
    shell: |
      kubectl label node {{ application.value.affinity }} {{ application.key }}={{ application.key }}
  when: application.value.affinity is defined

