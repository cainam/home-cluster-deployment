# check if exists and add enforced build

- block:
  - set_fact:
      title: "manage image {{ lookup('vars', image).name }} -"
      image_build_sources: "{{ role_path }}/templates/image-build/"
  - set_fact:
      templates_dirs:  "{{ lookup('pipe', '[ ! -d \"'+ image_build_sources +'\" ] || find \"'+ image_build_sources +'\"   -type d').split('\n')|reject('match', '^$')  }}"
      templates_files: "{{ lookup('pipe', '[ ! -d \"'+ image_build_sources +'\" ] || find \"'+ image_build_sources +'\" ! -type d').split('\n')|reject('match', '^$')  }}"

  - name: "{{ title }} process image"
    debug:
      msg: "image:\n{{ lookup('vars', image) | to_nice_yaml}}"
      
  - name: "{{ title }} assert variables"
    vars:
      i: "{{ lookup('vars', image) }}"
    ansible.builtin.assert:
      that:
        - i.type is defined
        - i.section is defined
        - i.tag is defined
        - i.type != 'fetch'  or ( i.type == 'fetch'  and i.source is defined)
        - i.type != 'script' or ( i.type == 'script' and i.command is defined)
        - i.type != 'script' or ( i.type == 'script' and i.name is defined)

  - set_fact:
      t: "{{ lookup('vars', image) }}"
      var_stack: "{{ (var_stack | default([])) + [image] }}"

  - name: "{{ title }} handle required base images"
    include_tasks: common/image.yaml
    vars:
      image: "{{ 'loop_'~t.name }}"
    loop: "{{ images | selectattr('name', 'defined') | selectattr('name', 'in', t.requires|default([]) ) }}"
    loop_control:
      loop_var: "{{ 'loop_'~t.name }}"
  
  - name: "{{ title }} set vars to complete the image"
    set_fact:
      image_var: "{{ var_stack[-1] }}"
      title: "manage image {{ lookup('vars', var_stack[-1]).name }} -"
      var_stack: "{{ var_stack[0:-1] }}"
  - name: "{{ title }} process image"
    debug:
      msg: "image {{image_var}}:\n{{ lookup('vars', image_var) | to_nice_yaml}}"

  - block:
    - name: "{{ title }} fetch image from registry and push to local registry"
      shell: |
        set -x
        echo "{{ platform | default(default_platform) }} {{ lookup('vars', image_var).source }}:{{ lookup('vars', image_var).tag | default('latest') }} {{ lookup('vars', image_var).section }}" | pull-tag-push.sh
      register: image2local
    - debug: var=image2local
      failed_when: false
    when: lookup('vars', image_var).type == 'fetch'
  
  - block:
    - name: "{{ title }} tempdir for build"
      tempfile:
        path: "{{ remote_temp }}"
        state: directory
        suffix: "-build-image"
      register: build_dir
    - name: "{{ title }} ensure destination directory exists for templates"
      file:
        path: "{{ build_dir }}{{ item | replace (image_build_sources,'') }}"
        recurse: true
        state: directory
      loop: "{{ templates_dirs }}"
    - name: "{{ title }} create config from templates"
      template:
        src: "{{ item }}"
        dest: "{{ build_dir }}/{{ item | replace( image_build_sources , '') }}"
      loop: "{{ templates_files }}"
    - name: "{{ title }} build image"
      shell: |
        set -xe
        image="{{ registry }}/{{ lookup('vars', image_var).section }}/{{ lookup('vars', image_var).name }}:{{ lookup('vars', image_var).tag | default('latest') }}"
        {{ lookup('vars', image_var).command }}
      args:
        chdir: "{{ build_dir.path }}"
      register: build_out
    
    - debug: var=build_out
      failed_when: false
    when: lookup('vars', image_var).type == 'script'
  vars:
    bv: "kj"
  run_once: true
