- block:
  - set_fact:
      title: "manage image {{ lookup('vars', image).name }} -"

  - name: "{{ title }} process image"
    debug:
      msg: "image:\n{{ lookup('vars', image) | to_nice_yaml}}"
    when: "'debug' in ansible_run_tags"
      
  - name: "{{ title }} assert variables"
    vars:
      i: "{{ lookup('vars', image) }}"
    ansible.builtin.assert:
      that:
        - i.type is defined
        - i.section is defined
        - i.tag is defined
        - i.type != 'fetch'  or ( i.type == 'fetch'  and i.source is defined)
        - i.type != 'script' or ( i.type == 'script' and i.command is defined)
        - i.type != 'script' or ( i.type == 'script' and i.name is defined)

  - set_fact:
      t: "{{ lookup('vars', image) }}"
      var_stack: "{{ (var_stack | default([])) + [image] }}"

  - debug:
      msg: "t:{{ t }}\nvar_stack:\n{{ var_stack | to_nice_yaml}}\nimage:\n{{image | to_nice_yaml }}\n"
    when: "'debug' in ansible_run_tags"

  - block:
    - name: "{{ title }} handle required base images"
      include_tasks: common/image.yaml
      vars:
        image: "{{ 'loop_'~t.name }}"
      loop: "{{ images | selectattr('name', 'defined') | selectattr('name', 'in', t.requires|default([]) ) }}"
      loop_control:
        loop_var: "{{ 'loop_'~t.name }}"
  
  - name: "recursion end - set vars to complete the upstream image"
    set_fact:
      image_var: "{{ var_stack[-1] }}"
      title: "manage image {{ lookup('vars', var_stack[-1]).name }} -"
      var_stack: "{{ var_stack[0:-1] }}"
      
  - name: "{{ title }} process image"
    debug:
      msg: "image {{image_var}}:\n{{ lookup('vars', image_var) | to_nice_yaml}}"
    when: "'debug' in ansible_run_tags"

- name: "{{ title }} check if image exists already"
  uri:
    url: "https://{{ registry }}/v2/{{ lookup('vars', image_var).section }}/{{ lookup('vars', image_var).name }}/manifests/{{ lookup('vars', image_var).tag | default('latest') }}"
    headers:
      Accept: application/vnd.oci.image.manifest.v1+json
    method: "GET"
  register: check_image
  failed_when: false
       
- debug:
    msg: "check_image type: {{ check_image.status | type_debug }}\n{{ check_image | to_nice_yaml }}\nimages_processed:\n{{ images_processed | to_nice_yaml }}"
  when: "'debug' in ansible_run_tags"

- block:
  - block:
    - name: "{{ title }} kubler - variables"
      set_fact:
        kubler_namespace: "common/kubler"
    - name: "{{ title }} kubler - directories"
      file:
        path: "{{ kubler.base }}/{{ item }}"
        recurse: true
        state: directory
      loop:
      - "{{ kubler.namespace_dir }}/images/{{ lookup('vars', image_var).name }}"
    - name: "{{ title }} kubler - kubler"
      shell: |
        if [ ! -d "kubler" ]; then git clone -b master --depth 1 "{{ kubler.git }}" kubler; else (cd kubler; git pull); fi  
      args:
        chdir: "{{ kubler.base }}"

    - block: # deploy namespace files to system for kubler build
      - name: "{{ title }} kubler - get namespace directories and files"
        set_fact:
          templates_dirs:  "{{ lookup('pipe', '[ ! -d \"'+ kubler_namespace +'\" ] || find \"'+ kubler_namespace +'\"   -type d').split('\n')|reject('match', '^$')  }}"
          templates_files: "{{ lookup('pipe', '[ ! -d \"'+ kubler_namespace +'\" ] || find \"'+ kubler_namespace +'\" ! -type d').split('\n')|reject('match', '^$')  }}"
      - name: "{{ title }} kubler- ensure destination directory exists for templates"
        file:
          path: "{{ kubler.base }}/{{ kubler.namespace_dir }}{{ item | replace (kubler_namespace,'') }}"
          recurse: true
          state: directory
        loop: "{{ templates_dirs }}"
      - name: "{{ title }} kubler - create config from templates"
        template:
          src: "{{ item }}"
          dest: "{{ kubler.base }}/{{ kubler.namespace_dir }}{{ item | replace( kubler_namespace , '') }}"
        loop: "{{ templates_files }}"
      - name: "{{ title }} kubler - make scripts executable"
        shell: |
          find "{{ kubler.base }}/{{ kubler.namespace_dir }}" -type f -name "*.sh" -exec chmod a+x {} \; 2>&1
      - name: "{{ title }} kubler - define deploy_kubler_files to ensure files are only deployed once"
        set_fact:
          deploy_kubler_files: "deploy_kubler_files"
      when: deploy_kubler_files is not defined
    - name: "{{ title }} kubler - create build.conf and Dockerfile.template"
      vars:
        image_dir: "{{ kubler.base }}/{{ kubler.namespace_dir }}/images/{{ lookup('vars', image_var).name }}"
      shell: |
        i='{{ lookup('vars', image_var).requires | default(['scratch'])| first }}'
        builder='{{ lookup('vars', image_var).builder | default('') }}'
        [ "${i}" == "scratch" ] || i="namespace/${i}"
        
        echo "IMAGE_PARENT='${i}'" > "{{ image_dir }}/build.conf"
        [ "${builder}" == "" ] || echo "BUILDER='${builder}'" >> "{{ image_dir }}/build.conf"
        
        cat > "{{ image_dir }}/Dockerfile.template" <<"EOF"
        FROM ${IMAGE_PARENT}
        LABEL maintainer="${MAINTAINER}"
        ADD rootfs.tar /
        EOF
    - name: "{{ title }} kubler - create build.sh"
      vars:
        build: "{{ lookup('vars', image_var).build }}"
        build_sh: "{{ kubler.base }}/{{ kubler.namespace_dir }}/images/{{ lookup('vars', image_var).name }}/build.sh"
      shell: |
        echo '_packages="{{ build.packages | default('') }}"' > "{{ build_sh }}"
        
        cat >> "{{ build_sh }}" <<"EOF"
        configure_builder(){
          {{ build.configure_builder | default('true') }}
        }
        EOF
        
        cat >> "{{ build_sh }}" <<"EOF"
        configure_rootfs_build(){
          {{ build.configure_rootfs_build | default('true') }}
        }
        EOF
        
        echo 'finish_rootfs_build(){ 
          {{ build.finish_rootfs_build | default('true') }}
        }' >> "{{ build_sh }}"

      when: lookup('vars', image_var).build is defined
    - name: "{{ title }} kubler - kubler"
      shell: |
        kubler build -f namespace/{{ lookup('vars', image_var).name }} 2>&1
      register: kubler_out
    - debug:
        msg: "kubler output:\n{{ kubler_out | to_nice_yaml }}"
    - name: "{{ title }} kubler - push to registry"
      shell: |
        image2upload="{{ registry }}/{{ lookup('vars', image_var).section }}/{{ lookup('vars', image_var).name }}:{{ lookup('vars', image_var).tag }}"
        podman tag namespace/{{ lookup('vars', image_var).name }} "${image2upload}"
        podman push "${image2upload}"
    environment:
      TERM: dumb # because kubler uses tput command
      KUBLER_VERBOSE: 'true'
      PATH: "{{ kubler.base }}/{{ kubler.kubler_dir }}/bin:{{ ansible_env.PATH }}"
      KUBLER_DATA_DIR: "{{ kubler.base }}/data"
      KUBLER_WORKING_DIR: "{{ kubler.base }}/{{ kubler.namespace_dir }}"
      KUBLER_DISABLE_KUBLER_NS: "true" #only use my own images
    when: lookup('vars', image_var).type == 'kubler'
  
  - block:
    - name: "{{ title }} fetch image from registry and push to local registry"
      shell: |
        set -x
        echo "{{ platform | default(default_platform) }} {{ lookup('vars', image_var).source }}:{{ lookup('vars', image_var).tag | default('latest') }} {{ lookup('vars', image_var).section }}" | pull-tag-push.sh
      register: image2local
    - debug: var=image2local
      failed_when: false
    when: lookup('vars', image_var).type == 'fetch'
  
  - block:
    - name: "{{ title }} tempdir for build"
      tempfile:
        path: "{{ remote_temp }}"
        state: directory
        suffix: "-build-image"
      register: build_dir
    - set_fact:
        templates_dirs:  "{{ lookup('pipe', '[ ! -d \"'+ image_build_sources +'\" ] || find \"'+ image_build_sources +'\"   -type d').split('\n')|reject('match', '^$')  }}"
        templates_files: "{{ lookup('pipe', '[ ! -d \"'+ image_build_sources +'\" ] || find \"'+ image_build_sources +'\" ! -type d').split('\n')|reject('match', '^$')  }}"
    - name: "{{ title }} ensure destination directory exists for templates"
      file:
        path: "{{ build_dir }}{{ item | replace (image_build_sources,'') }}"
        recurse: true
        state: directory
      loop: "{{ templates_dirs }}"
    - name: "{{ title }} create config from templates"
      template:
        src: "{{ item }}"
        dest: "{{ build_dir }}/{{ item | replace( image_build_sources , '') }}"
      loop: "{{ templates_files }}"
    - name: "{{ title }} build image"
      shell: |
        set -xe
        image="{{ registry }}/{{ lookup('vars', image_var).section }}/{{ lookup('vars', image_var).name }}:{{ lookup('vars', image_var).tag | default('latest') }}"
        {{ lookup('vars', image_var).command }}
      args:
        chdir: "{{ build_dir.path }}"
      register: build_out
    
    - debug: var=build_out
      failed_when: false
    when: lookup('vars', image_var).type == 'script'
  when: (check_image.status != 200) or ('force' in ansible_run_tags)
  
- name: "{{ title }} record image as processed"
  set_fact:
    images_processed: "{{ images_processed + [lookup('vars', image_var).name] }}"  
