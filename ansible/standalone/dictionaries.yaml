---
- name: test
  gather_facts: false
  hosts: all
  vars:
    group_all: group_vars/all
    apps: ../roles/deploy/vars/main.yml
    apps2: apps.yaml

  tasks:
  - name: include vars 
    include_vars:
      file: "{{apps}}"
      
  - block: # to test expantition of array 
    - name:
      set_fact:
        g: "{{ gateways }}"
        ns: "testns"
        
    - name: g
      debug:
        msg: "{{g|to_yaml}}"
        
    - name: "{{ name_prefix }}  record application with gateway for VirtualService"
      set_fact:
        g: "{{ g | combine(
          {default_gateway: 
            {'VirtualService': [{
              'namespace': ns,
              'application': item.app,
              'network': item.net}] } }, list_merge='append', recursive=True) }}"
      loop:
      - app: a1
        net:
          gW: G1
      - app: a2
        net: 
          gw: g2
      - app: a3
        net: 
          gw: g3
    - name: g
      debug:
        msg: "{{ g|to_yaml}}"
        
    run_once: true

  - block: # get value based on multiple conditions
    - name: include vars 
      include_vars:
        file: "../../secrets"

    - name: print
      debug:
        msg: "{{ service| list | to_yaml }}"

    - name: get value
      set_fact:
        val: "{{ service | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='password') | first }}"

    - name: print
      debug:
        msg: "val {{ val }}"
    run_once: true
         
  - block:
    - name: include vars 
      include_vars:
        file: "{{apps}}"
    - name: print apps
      debug:
        msg: 'apps: {{ apps | to_yaml }}'
    - name: print gateways
      debug:
        msg: 'gateways: {{ gateways | to_yaml }}'
    - name: print gateways | dict2items
      debug:
        msg: 'gateways: {{ gateways | dict2items | to_yaml }}'

    - name: print applications | dict2items
      debug:
        msg: 'applications: {{ applications | dict2items | to_yaml }}'

    #- name: update helm_install
      #set_fact:
        #gateways: "{{ gateways | combine({gateway.key: {'install': gateway_install} }, list_merge='append', recursive=true)}}"
      #loop: "{{gateways | dict2items}}"
      #loop_control:
        #loop_var: gateway

    #- name: print new gateways -1
      #debug:
        #msg: "{{ gateways |  to_yaml }}"

    #- name: update helm_install
      #set_fact:
        #gateways: "{{ gateways | combine({gateway.key: {'install': gateway.value.install} }, list_merge='append', recursive=true)}}"
      #loop: "{{gateways | dict2items}}"
      #loop_control:
        #loop_var: gateway

    #- name: print new gateways -2
      #debug:
        #msg: "{{ gateways |  to_yaml }}"

    - name: print loop gateways dict2items
      debug:
        msg: "item:\n{{item}}"
      loop: "{{gateways | dict2items}}"

    - name: combine gateway deployment into applications # all raw items have to be treated before!
      set_fact: 
        applications: "{{ applications | combine({gateway.value.namespace | default(default_gateway_namespace): {gateway.key: gateway_install }}, recursive=true) }}"
      loop: "{{gateways | dict2items}}"
      loop_control:
        loop_var: gateway

    #- name: combine gateway helm_options into applications # jinja2 will never work
      #set_fact: 
        #applications: "{{ applications | combine({gateway.value.namespace | default(default_gateway_namespace): {gateway.key: 
        #{'helm_options': '--set name='~gateway.key~' '{%for p in gateway.value.additional_ports %}'c'{% endfor %}  } }}
        #, list_merge='append', recursive=true) }}"
      #loop: "{{gateways | dict2items}}"
      #loop_control:
        #loop_var: gateway

    - name: print updated applications
      debug:
        msg: 'applications: {{ applications | to_yaml }}'
    when: false
    run_once: true
 
  - block:
    - name: ports
      debug:
        msg: "{{ gateway_install | combine({'ports': item.value.additional_ports | default({}) | list}, list_merge='append', recursive=true) | to_yaml }}" 
      loop: "{{gateways | dict2items}}"

    - name: combine gateway deployment into applications # all raw items have to be treated before!
      set_fact: 
        applications: "{{ applications | combine(
           {gateway.value.namespace | default(default_gateway_namespace): 
             {gateway.key: gateway_install | combine({'ports': gateway.value.additional_ports | default({}) | list, 'type': 'gateway' }, list_merge='append', recursive=true)}}, recursive=true)}}"
      loop: "{{gateways | dict2items}}"
      loop_control:
        loop_var: gateway

    - name: print updated applications
      debug:
        msg: 'applications: {{ applications | to_yaml }}'

    #- name: print gateways in applications
      #debug:
        #msg: '{{ app | to_yaml }}'
      #when: app.value.type == 'gateway'
      #loop: "{{applications | dict2items}}"
      #loop_control:
        #loop_var: app

    - name: example of map to get only then names of the ports
      debug:
        msg: "{{ applications[gateway.value.namespace | default(default_gateway_namespace)][gateway.key].ports | map(attribute='name') }}"
      loop: "{{gateways | dict2items}}"
      loop_control:
        loop_var: gateway

    - name: prepare by ns
      include_tasks: prep_ns.yml
      loop: "{{ applications | dict2items }}"
      loop_control:
        loop_var: namespace

    - name: print updated applications final
      debug:
        msg: 'applications: {{ applications | to_yaml }}'

    when: false
    run_once: true

  - block:
    - set_fact:
        lst: |
          {%- set list = [] -%}
          {%- for index in range(1, 5 ) -%}
            {{ list.append(index)  }}
          {%- endfor -%}
          {{ list }}

    - name: print list
      debug:
        msg: "{{ lst }}"

#    - name: example of map to get only then names of the ports
#      debug:
#        msg: "{{ applications[gateway.value.namespace | default(default_gateway_namespace)][gateway.key] | map('extract','ports') }}"
#      loop: "{{gateways | dict2items}}"
#      loop_control:
#        loop_var: gateway

    when: false
    run_once: true

