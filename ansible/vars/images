images:
- name: idp
  tag: 2025.1
  type: script
  requires:
  - my_base
  command: |
    git clone --branch master --depth 1 --filter=blob:none --sparse "{{ own_git_url }}"
    git="{{ own_git_url.split('/')[-1].split('.') | first}}"
    cd "${git}"
    git sparse-checkout set hydra-login-consent-node
    mv  hydra-login-consent-node/* ..
    cd ..
    rm -rf "${git}"
    cat > Dockerfile << EOF
    FROM my_base:{{ software.alpine.version }}
    RUN apk add --no-cache npm
    RUN adduser -S ory -D -u 10000 -s /bin/nologin
    COPY . /app
    WORKDIR /app
    RUN npm ci --silent && npm run build
    USER 10000
    ENTRYPOINT npm run serve
    EOF
    podman image build . --tag "${image}" && podman image push "${image}"

- name: helm
  type: kubler
  tag: "{{ software.helm.version }}"
  requires:
  - base
  section: local
  build:
    packages: =app-admin/helm-{{ software.helm.version }}
    configure_builder: |
      set -x
      echo "=app-admin/helm-{{ software.helm.version }} ~arm64" > /etc/portage/package.accept_keywords/helm.conf && cat /etc/portage/package.accept_keywords/helm.conf
      echo "=app-admin/helm-{{ software.helm.version }}" > /etc/portage/package.unmask/helm.conf && cat /etc/portage/package.unmask/helm.conf
    configure_rootfs_build: |
      set -x
      echo "=app-admin/helm-{{ software.helm.version }} ~arm64" > /etc/portage/package.accept_keywords/helm.conf && cat /etc/portage/package.accept_keywords/helm.conf
      echo "=app-admin/helm-{{ software.helm.version }}" > /etc/portage/package.unmask/helm.conf && cat /etc/portage/package.unmask/helm.conf
      sleep 9
  
- type: script
  name: my_py
  tag: 3
  section: local
  requires:
  - my_base
  command: |
    cat > Dockerfile << 'EOF'
    FROM my_base:{{ software.alpine.version }}
    ENV VIRTUAL_ENV=/py_env 
    ENV PATH="$VIRTUAL_ENV/bin:$PATH"
    RUN apk add --no-cache jq py3-packaging py3-jinja2 py3-kubernetes gnupg openssl xz python3 py3-pip py3-psycopg2 libturbojpeg ffmpeg
    RUN python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate && pip install fastapi uvicorn kopf
    EOF
    podman image build . --tag "${image}" && podman image push "${image}"

- type: fetch
  source: docker.io/library/registry
  tag: "{{ software.registry.version }}"
  section: local

- name: base
  tag: 2025.02-1
  section: local
  type: kubler
  build:
    packages: busybox
    finish_rootfs_build: |
      ln -s usr/lib "${_EMERGE_ROOT}/lib"
      "${_EMERGE_ROOT}"/bin/busybox --install "${_EMERGE_ROOT}/bin"
      env-update
  
- name: base-13
  tag: 2025.02-1
  section: local
  type: kubler
  builder: namespace/my_builder-13
  build:
    packages: busybox
    finish_rootfs_build: |
      ln -s usr/lib "${_EMERGE_ROOT}/lib"
      "${_EMERGE_ROOT}"/bin/busybox --install "${_EMERGE_ROOT}/bin"
      env-update

- name: python-3.12
  tag: 2025.02-1
  section: local
  requires:
  - base
  type: kubler
  build:
    packages: dev-python/packaging
    configure_rootfs_build: |
      echo "configure_rootfs_build => start"
      update_use '+sqlite'
      provide_package sys-devel/gcc

      # add user/group for unprivileged container usage
      groupadd -g 404 python
      useradd -u 4004 -g python -d /home/python python
      mkdir -p "${_EMERGE_ROOT}"/home/python
      echo -e "*/* PYTHON_TARGETS: -* python3_12\n*/* PYTHON_SINGLE_TARGET: -* python3_12\n*/* -su" >> /etc/portage/package.use/98py.conf
      #echo "*/* -su" >> /etc/portage/package.use/98su.conf
      #echo "*/* -seccomp" >> /etc/portage/package.use/98seccomp.conf
      #echo "*/* -udev" >> /etc/portage/package.use/98udev.conf
      #echo "*/* -systemd" >> /etc/portage/package.use/98systemd.conf

      emerge --depclean
      ln -s usr/lib "${_EMERGE_ROOT}/lib"
      echo "configure_rootfs_build => end"
    finish_rootfs_build: | 
      echo "finish_rootfs_build => start"
      # required for internal modules
      copy_gcc_libs
      echo "finish_rootfs_build => done"
  
- name: python-3.13
  tag: 2025.02-2
  section: local
  requires:
  - base-13
  type: kubler
  build:
    packages: "dev-python/packaging dev-python/gpep517"
    configure_rootfs_build: |
        echo "configure_rootfs_build => start"
        update_use '+sqlite'
        provide_package sys-devel/gcc

        # add user/group for unprivileged container usage
        groupadd -g 404 python
        useradd -u 4004 -g python -d /home/python python
        mkdir -p "${_EMERGE_ROOT}"/home/python
        echo -e "*/* PYTHON_TARGETS: -* python3_13\n*/* PYTHON_SINGLE_TARGET: -* python3_13\n*/* -su" >> /etc/portage/package.use/98py.conf
        #emerge --depclean

        ln -s usr/lib "${_EMERGE_ROOT}/lib"
        echo "configure_rootfs_build => done"
    finish_rootfs_build: |
        echo "finish_rootfs_build => start"
        copy_gcc_libs
        echo "finish_rootfs_build => done"
   
  
- name: infopage-xx
  tag: 2025.02-3
  section: local
  requires:
  - python-3.12
  type: kubler

- name: ha-base
  tag: 2025.02-4
  section: home
  requires:
  - python-3.12
  type: kubler
  build:
    packages: "app-misc/jq app-crypt/gnupg dev-python/jinja2 dev-python/idna dev-python/certifi dev-python/requests"
    run_with: python3 -m homeassistant --config /config --log-file /tmp/log --skip-pip

- name: ha
  tag: 2025.02-4
  section: home
  requires:
  - ha-base
  type: kubler
  build:
    packages: dev-db/postgresql
    configure_rootfs_build: |
      HA_DIR=/ha
      mkdir -p ${_EMERGE_ROOT}/${HA_DIR}
      ( cd ${_EMERGE_ROOT}/${HA_DIR}; 
          git clone --depth=1 -b "{{ software.home_assistant.version }}" https://github.com/home-assistant/core.git
          cd core
          for package in home-assistant-frontend pyotp PyQRCode paho-mqtt pyudev; do
            grep -q "${package}==" requirements.txt  || grep "^${package}==" requirements_all.txt >> requirements.txt
          done
            
          for f in requirements.txt homeassistant/package_constraints.txt pyproject.toml homeassistant/helpers/network.py; do
            sed -i -e "/hass-nabucasa/d" -e "/hass_nabucasa/d" "${f}"
          done
          sed -i -e "/hass_nabucasa/d" -e "s#remote.is_cloud_request.get()#False#" homeassistant/components/http/forwarded.py
            
          # remove from default configuration
          cp -dp homeassistant/components/default_config/manifest.json homeassistant/components/default_config/manifest.json.org
          jq  -a 'del(.dependencies[] | select(. == ("assist_pipeline","stream","go2rtc","cloud","conversation","zeroconf","usb","ssdp","dhcp","mobile_app","bluetooth") ) )' homeassistant/components/default_config/manifest.json.org > homeassistant/components/default_config/manifest.json     
      )
      ln -s ${_EMERGE_ROOT}/${HA_DIR} ${HA_DIR}
      
      VIRTUAL_ENV=/py_env
      export PYTHONPATH=${PYTHON_ENV}/lib/python3.12/site-packages/:${HA_DIR}/core
      python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate
      pip install  -r ${HA_DIR}/core/requirements.txt | tee ${_EMERGE_ROOT}/py_env.log
    finish_rootfs_build: |
      VIRTUAL_ENV=/py_env
      . "$VIRTUAL_ENV"/bin/activate
      ln -s ${_EMERGE_ROOT}/usr/bin/pg_config17 /usr/bin/pg_config
      pip install psycopg2
      find /py_env -name '*.so*' -exec strip {} \;
      pip uninstall --yes uv
      mv "$VIRTUAL_ENV" ${_EMERGE_ROOT}/"$VIRTUAL_ENV"

- name: auth-operator
  tag: 2025.02-7
  section: auth
  build:
    finish_rootfs_build: |
      VIRTUAL_ENV=/py_env
      export PYTHONPATH=${PYTHON_ENV}/lib/python3.12/site-packages/   
      python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate && pip install  -r /ha/core/requirements.txt
  requires:
  - python-3.12
  type: kubler

- name: infopage
  tag: 2025.03-1
  section: tools
  requires:
  - python-3.13
  type: kubler
  build:
    packages: dev-python/uvicorn net-misc/curl dev-python/jinja2 dev-python/requests dev-python/typing-extensions dev-python/pyyaml 
    finish_rootfs_build: |
      VIRTUAL_ENV=/py_env
      export PYTHONPATH=${VIRTUAL_ENV}/lib/python3.13/site-packages/
      python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate && pip install fastapi
      mv  "${VIRTUAL_ENV}" "${_EMERGE_ROOT}/${VIRTUAL_ENV}"

  
- type: script
  name: my_base
  tag: "{{ software.alpine.version }}"
  section: local
  command: |
    version="{{ software.alpine.version }}" 
    version_short=$(echo "${version}" | sed -e 's/^v//g')
    version_tag=${version%.*}
    minirootfs="alpine-minirootfs-${version_short}-aarch64.tar.gz"
    curl -L -O "https://github.com/alpinelinux/docker-alpine/raw/refs/heads/${version_tag}/aarch64/${minirootfs}"
    cat > Dockerfile << EOF
    FROM scratch
    ADD ${minirootfs} /
    RUN apk add --no-cache tar binutils curl
    CMD ["/bin/sh"]
    EOF
    podman image build . --tag "${image}" && podman image push "${image}"
    
