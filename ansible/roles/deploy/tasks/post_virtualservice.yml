- name: set app fact
  set_fact:
    vs_title: "post_virtualservice - gateway:{{ gateway.key }} namespace:{{ gateway.value.namespace | default(default_gateway_namespace)}} "

- name: "{{ vs_title }} - dump namespace section before VirtualService application configuration"
  debug:
    msg: "gateway: {{ gateway | to_yaml }}"
  when: "'debug' in ansible_run_tags"

- name: "{{ vs_title }} - update VirtualService application configuration"
  shell: |
    echo  "update gateway {{ gateway.key }} in namespace {{ gateway.value.namespace }} with application {{ vs.application }} in namespace {{ vs.namespace }}"
    kubectl get -o yaml vs -n "{{ gateway.value.namespace }}" "{{ gateway.key }}" | \
    yq -y 'del(.spec.http[]? | select(.name=="'"{{ vs.application }}"'"))' | \
    yq -y '.spec.http += [{"name":"{{ vs.application }}","rewrite":{"uri":"{{ vs.network.rewrite | default("/") }}" },"route":[{"destination":{"host":"{{ vs.network.svcName | default(vs.application) }}.{{ vs.namespace }}.svc.cluster.local"{% if vs.network.svcPort is defined %},"port":{"number":{{ vs.network.svcPort }} }{% endif %}}}],"match":[{"uri":{"prefix":"{{ vs.network.prefix | default("/" + vs.application) }}"}}] {% if vs.network.addition is defined %},{{ vs.network.addition }} {% endif %} }]' | \
    kubectl apply -f -
  register: vs_setup
  loop: "{{ gateway.value.VirtualService }}"
  loop_control:
   loop_var: vs
  
- name: "{{ vs_title }} - output of VirtualService application configuration"
  debug:
    msg: "{{ vs_setup }}"
#    msg: "result: {{ item.rc }} out: {{ item.stdout }} for: {{ item.item.key }}"
#  loop: "{{ vs_setup.results | dict2items }}"
  when: "'debug' in ansible_run_tags"
