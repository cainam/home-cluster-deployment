- block:
   # testing examples: '\{\"limit_application\":[\"x\",\"y\"]}'  '\{\"limit_application\":\"x1y\"}' '{"limit_application":[infopage,tor],"limit_namespace":[tools]}'
   # '{"limit_application":[1a1],"limit_namespace":[ns2]}'

  - set_fact:
      apps: "{{ applications }}"

  - name: assign Ansible extra-vars values to be manipulated
    set_fact:
      only_ns: "{{ limit_namespace }}"
    when: limit_namespace is defined

  - name: assign Ansible extra-vars values to be manipulabled
    set_fact:
      only_apps: "{{ limit_application }}"
    when: limit_application is defined
    
  - debug:
      msg: "only_apps:{{ only_apps }}"
    when: only_apps is defined and "'debug_only' in ansible_run_tags"

  - set_fact:
      only_apps: "{{[only_apps,]}}"
    when: only_apps is string
    
  - set_fact:
      only_ns: "{{[only_ns,]}}"
    when: only_ns is string
    
  - debug:
      msg: "only_ns:{{ only_ns }}"
    when: only_ns is defined and "'debug_only' in ansible_run_tags"

# add gateways to applications
  - name: apply default_gateway_namespace to all gateways missing it
    set_fact:
      gateways: "{{ gateways | combine({gateway.key: {'namespace': default_gateway_namespace }}, recursive=true) }}"
    loop: "{{gateways | dict2items}}"
    loop_control:
      loop_var: gateway
    when: gateway.value.namespace is not defined

  - name: gateway_default_namespace populated to all gateways (to avoid checking this over and over again)
    debug:
      msg: 'gateways: {{ gateways | to_yaml }}'
    when: "'debug_only' in ansible_run_tags"

  - name: combine gateway deployment into applications # all raw items have to be treated before! # merge from gateway_install + optional additional_ports on individual gateway
    set_fact:
      apps: "{{ apps | combine(
         {gateway.value.namespace: 
           {gateway.key: gateway_install | combine({'ports': gateway.value.additional_ports | default({}) | list, 'type': 'gateway' }, list_merge='append', recursive=true)}}, recursive=true)}}"
    loop: "{{gateways | dict2items}}"
    loop_control:
      loop_var: gateway

  - name: application list with gateways added
    debug:
      msg: 'apps: {{ apps | to_yaml }}'
    when: "'debug_only' in ansible_run_tags"

# flatten app list and make namespace an attribute
  - debug: 
      msg: "{{item.key}}: {{ item.value }}\n{{ names | zip(item.value| dict2items| map(attribute='value') ) | to_nice_yaml }}" # create array from names and application values
    vars:
      app_name: "{{ item.value | dict2items | map(attribute='key') }}" # get application name
      names: "{{ (app_name) | zip(([item.key]*(app_name|length))   ) }}" # create array of application and namespace name
    loop: "{{ apps |dict2items}}"

  - name: flatten app list - add arrays of namespace and application name to each application dict
    set_fact:
      app_temp: "{{ app_temp | default([]) + (names | zip(item.value| dict2items| map(attribute='value') )) }}" # create array from names and application values
    vars:
      app_name: "{{ item.value | dict2items | map(attribute='key') }}" # get application name
      names: "{{ (app_name) | zip(([item.key]*(app_name|length))   ) }}" # create array of application and namespace name
    loop: "{{ apps |dict2items}}"

  - name: debug app_temp
    debug:
      msg: "app_temp:\n{{ app_temp  }}"
    when: "'debug_only' in ansible_run_tags"

  - name: flatten app list - transform temporary array values of namespace and application name into dict items
    vars:
      y: "{{ {'namespace':item[0][1],'name':item[0][0]} | combine(item[1]) }}" # turn names array item into dict
    set_fact:
      app_list: "{{ (app_list|default([])) + [y] }}"
    loop: "{{ app_temp }}"

  - name: app_list
    debug: 
      msg: "app_list:\n{{ app_list | to_nice_yaml }}"

# add gateways to requires:
  - name: debug - add gateways as application requirements
    vars:
      my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      gw: "{{ app.network.gateway | default(default_gateway) }}"
      rq: "{{ app.requires|default([])+[{'name': gw, 'namespace': gateways[gw].namespace}] }}"
    debug: 
      msg: "my_idx:{{ my_idx }}\ngateway:{{ gw }}\nrq: {{rq}}\ngw_ns: {{gateways[gw].namespace}}\nnew app: {{ app  | combine({'requires': rq }, recursive=true) | to_nice_yaml}}"
    loop: "{{ app_list | selectattr('network', 'defined')  }}"
    loop_control:
      loop_var: app
    when: "'debug_only' in ansible_run_tags"

  - name: add gateways as application requirements
    vars:
      my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      gw: "{{ app.network.gateway | default(default_gateway) }}"
      rq: "{{ app.requires|default([])+[{'name': gw, 'namespace': gateways[gw].namespace}] }}"
      new_entry: "{{app  | combine({'requires': rq }, recursive=true) }}"
    set_fact:
      app_list: "{%- set _ = app_list.pop(my_idx|int) %}{{app_list+[new_entry]}}"
    loop: "{{ app_list | selectattr('network', 'defined')  }}"
    loop_control:
      loop_var: app

  - name: app_list
    debug: 
      msg: "app_list:\n{{ app_list | to_nice_yaml }}"

# if namespace limitation given, add all applications of the namespace(s) to the list of limited applications
  - name: apps from limit_namespace
    block:
    - debug: 
       msg: "{{ item }}: apps: {{ app_list | selectattr('namespace', 'eq', item)| map(attribute='name') }}"
      loop: "{{ only_ns }}"
    - set_fact:
        only_apps: "{{ (only_apps|default([])) + app_list | selectattr('namespace', 'eq', item)| map(attribute='name') }}"
      loop: "{{ only_ns }}"
    when: only_ns is defined

  - debug:
      msg: "only_apps prepared:{{ only_apps }}"
    when: only_apps is defined

# combine all multi-level requirements to requires
## testing Jinja2: https://j2live.ttl255.com/
  - name: debug - recursive requirements
    vars:
      my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      app_deps: |
        {%- set loop_data={"reqs":[app.name],"app_list": app_list, 'all_req': []} -%}
        {# length: {{ loop_data.reqs|length }} loop_data: {{ loop_data}}  #}
        {%- for b in range(0,1000,1)  if (loop_data.reqs|length|int > 0) %} 
        {%- set current=loop_data.reqs.pop() %}
        {%- set req = ((app_list | selectattr('name','eq',current)|list)[0]['requires'])  | default([])  | map(attribute='name' )| list %}
        {%- set full_req = (app_list | selectattr('name','eq',current)|list)[0]['requires'] | default([]) %}
        {%-  set d = loop_data.update( {'reqs':  loop_data.reqs + req    } ) %}
        {%-  set d = loop_data.update( {'all_req':  (loop_data.all_req + full_req) | unique     } ) %}
        {# current:{{current}} reqs left: {{loop_data.reqs}} req: {{ req }} all_req: {{ loop_data.all_req  }} #}
        {%- endfor %}
        {{ loop_data.all_req }} 
      new_app: "{{ app | ansible.utils.remove_keys(target=['requires'])| combine({'requires': app_deps}) }}"
    debug: 
      msg: "my_idx:{{ my_idx }}\napp_deps:{{app_deps}}\nnew_app:{{new_app}}"
    loop: "{{ app_list | selectattr('requires', 'defined')  }}"
    loop_control:
      loop_var: app

  - name: set - recursive requirements
    vars:
      my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      app_deps: |
        {%- set loop_data={"reqs":[app.name],"app_list": app_list, 'all_req': []} -%}
        {# length: {{ loop_data.reqs|length }} loop_data: {{ loop_data}}  #}
        {%- for b in range(0,1000,1)  if (loop_data.reqs|length|int > 0) %} 
        {%- set current=loop_data.reqs.pop() %}
        {%- set req = ((app_list | selectattr('name','eq',current)|list)[0]['requires'])  | default([])  | map(attribute='name' )| list %}
        {%- set full_req = (app_list | selectattr('name','eq',current)|list)[0]['requires'] | default([]) %}
        {%-  set d = loop_data.update( {'reqs':  loop_data.reqs + req    } ) %}
        {%-  set d = loop_data.update( {'all_req':  (loop_data.all_req + full_req) | unique     } ) %}
        {# current:{{current}} reqs left: {{loop_data.reqs}} req: {{ req }} all_req: {{ loop_data.all_req  }} #}
        {%- endfor %}
        {{ loop_data.all_req }} 
      new_app: "{{ app | ansible.utils.remove_keys(target=['requires']) | combine({'requires': app_deps}) }}"
    set_fact: 
      app_list: "{%- set _ = app_list.pop(my_idx|int) %}{{app_list+[new_app]}}"
    loop: "{{ app_list | selectattr('requires', 'defined')  }}"  # process only those applications which have requirements set
    loop_control:
      loop_var: app

  - name: app_list
    debug: 
      msg: "app_list:\n{{ app_list | to_nice_yaml }}"

# extend only_apps with depenencies
  - block: 
    - name: debug - addition of dependencies to limited application list
      vars:
        add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | selectattr('requires', 'defined') | map(attribute='requires'))[0]|default([]) |map(attribute='name' )|default([])  | list }}" 
        # add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | selectattr('requires', 'defined') | map(attribute='requires')) | map(attribute='name') | to_nice_yaml }}" 
      debug:
        msg: "reqs: \n{{ add_reqs }}"
      loop: "{{ only_apps }}"

    - name: determine additional applications for limited application list from dependencies
      vars:
        add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | selectattr('requires', 'defined') | map(attribute='requires'))[0]|default([]) |map(attribute='name' )|default([])  | list }}" 
        # add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | map(attribute='requires'))[0] | map(attribute='name') }}"
      set_fact:
        reqs: "{{ reqs|default([]) + add_reqs }}"
      loop: "{{ only_apps }}"

    - name: update additional applications for limited application list from dependencies
      set_fact:
        only_apps: "{{ (reqs + only_apps) | unique }}"

    - debug:
        msg: "only_apps:\n{{ only_apps }}"

    when: "'deps' in ansible_run_tags" 

# remove all that is no longer required

  - name: set only_apps to include all_apps if only_apps is not defined
    set_fact:
      only_apps: "{{ app_list | map(attribute='name') | list }}"
    when: only_apps is not defined

  - set_fact:
#      applications: "{{ apps }}"
      applications: {}
 
  - name: remove items which are not required
    set_fact:
      applications: >-
        {{
          applications | combine({ item.key: item.value | dict2items | selectattr('key', 'in', only_apps) | items2dict })
        }}
    loop: "{{ apps | dict2items }}"
    loop_control:
      loop_var: item
      
  - debug:
      msg: "applications:\n{{ applications | to_nice_yaml}}"
    failed_when: "'prepare' in ansible_run_tags"
      
  run_once: true
