- name: print deployment information
  debug:
    msg: "namespace: {{ item }} application: {{ applications[item] }}" 
  with_items: "{{ applications.keys() | list }}"
  run_once: true
  
- name: check if container registry is available
  shell: curl -s -X GET https://myregistry.adm13:443/v2/_catalog | jq 'has("repositories")'
  register: check_registry
  #failed_when: true
  
- name: restart registry
  shell: /etc/init.d/registry restart
  when: check_registry.stdout != "true"

- name: init required volumes
  set_fact:
    keep_volumes: "{{ volumes_to_exempt }}"
  run_once: true
  
- name: prepare application prerequisites
  include_tasks: prepare_deployment.yaml
    
- name: prepare application prerequisites
  include_tasks: prepare_by_namespace.yml
  when: (limit_namespace is not defined or namespace.key == limit_namespace)
  loop: "{{ applications | dict2items }}"
  loop_control:
    loop_var: namespace

- name: print updated applications before execution
  debug:
    msg: 'applications: {{ applications | to_yaml }}'
  when: "'debug' in ansible_run_tags"
  run_once: true

- name: run per namespace
  include_tasks: manage_applications.yml
  when: (limit_namespace is not defined or namespace.key == limit_namespace)
  loop: "{{ applications | dict2items }}"
  loop_control:
    loop_var: namespace
  run_once: true

- name: post installation
  include_tasks: post_installation.yml
  loop: "{{ applications | dict2items }}"
  loop_control:
    loop_var: namespace
  run_once: true

- name: "{{ post_inst }}list volumes to keep"
  debug:
    msg: "{{ item }}"
  loop: "{{ keep_volumes }}"
  run_once: true

- name: "{{ post_inst }}list of existing volumes"
  shell: gluster vol list
  run_once: true
  register: existing_volumes

- name: "{{ post_inst }}determine volumes for deletion"
  set_fact:
    volume2delete: "{{ existing_volumes.stdout_lines | difference(keep_volumes) }}"
  run_once: true

- name: "{{ post_inst }}list volumes to delete"
  debug:
    msg: "{{ item }}"
  loop: "{{ volume2delete }}"
  run_once: true

- block:
    - name: "{{ post_inst }}purge volumes - get bricks"
      shell: |
        gluster vol info "{{ item }}" | grep "^Brick[0-9]" | cut -d : -f 3- | sort -u
      loop: "{{ volume2delete }}"
      run_once: true
      register: get_bricks_out

    - debug: var=get_bricks_out

    - name: purge volumes - delete volume
      gluster.gluster.gluster_volume:
        state: absent
        name: "{{ item }}"
      loop: "{{ volume2delete }}"
      run_once: true

    - name: purge volumes - delete bricks
      shell: |
        umount -v "{{ item.1 }}"
        echo "{{ item.1 }}" | grep -q "^/data/gluster/bricks/" && rm -rfv "{{ item.1 }}"
      #loop: "{{ get_bricks_out.stdout_lines }}"
      with_subelements:
         - "{{ get_bricks_out.results }}"
         - stdout_lines

  when: "'purge_volumes' in ansible_run_tags"
