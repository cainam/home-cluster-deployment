- name: set app fact
  set_fact:
    post_inst: "post_installation {{ namespace.key}} - "

#- name: "{{ post_inst }}determine namespaces of gateways"
  #shell: kubectl get pods --selector=istio="{{ item.key }}" -A -o jsonpath='{.items[*].metadata.namespace}'
  #register: ns_gw
  ## failed_when: ns_gw.stdout == ""
  #loop: "{{ gateways | dict2items }}"

#- name: "{{ post_inst }}output: determine namespaces of gateways"
  #debug: 
    #msg: "result: {{ item.rc }} out: {{ item.stdout }} for: {{ item.item.key }}"
  #loop: "{{ ns_gw.results  }}"
  #when: "'debug' in ansible_run_tags"

#- name: "{{ post_inst }}debug: determine namespaces of gateways"
  #debug:
    #msg: "item.item.key: {{ item.item.key | to_yaml }} item.stdout:{{ item.stdout| to_yaml }}"
  #loop: "{{ ns_gw.results  }}"

#- name: "{{ post_inst }}extend gateways by discovered namespaces - default gateway"
  #set_fact:
    #gateways: "{{ gateways | combine({item.gw_name: {'namespace': item.namespace }}, recursive=True) }}"
##    gateways: "{{ gateways | combine({item.item.key: {'namespace': item.stdout }}, recursive=True) }}"
##  loop: "{{ ns_gw.results  }}"
  #loop:
  #- gw_name: gateway
    #namespace: istio-ingress

- name: "{{ post_inst }}debug gateways"
  debug: 
    msg: "namespace.value | dict2items: {{ namespace.value | dict2items| to_yaml}}"
  when: "'debug' in ansible_run_tags"

- name: "{{ post_inst }}implement gateways"
  include_tasks: post_gateway.yml
  loop: "{{ namespace.value | dict2items }}"
  when: gateway.value.type is defined and gateway.value.type == 'gateway'
  loop_control:
    loop_var: gateway

# now VirtualServices => migrate to main (escape namespace loop which is used as when: here

- name: "{{ post_inst }}debug gateways"
  debug:
    msg: "gateways: {{ gateways | to_yaml}}"
  when: "'debug' in ansible_run_tags"

- name: "{{ post_inst }}debug gateways"
  debug:
    msg: "gateway.value.namespace: {{ gateway.value.namespace| default('no') }}"
  loop: "{{ gateways | dict2items}}"
  loop_control:
    loop_var: gateway
  when: "'debug' in ansible_run_tags"

- name: "{{ post_inst }}debug gateways"
  debug:
    msg: "(gateway.value.namespace| default(default_gateway_namespace)): {{ (gateway.value.namespace| default(default_gateway_namespace))}}"
  loop: "{{ gateways | dict2items}}"
  loop_control:
    loop_var: gateway
  when: "'debug' in ansible_run_tags"

- name: "{{ post_inst }}debug gateways"
  debug:
    msg: "namespace.key: {{ namespace.key}}"
  when: "'debug' in ansible_run_tags"

- name: "{{ post_inst }}apply VirtualService application configurations"
  include_tasks: post_virtualservice.yml
  loop: "{{ gateways | dict2items}}"
  loop_control:
    loop_var: gateway
  when: (gateway.value.namespace| default(default_gateway_namespace)) == namespace.key

- name: "{{ post_inst }} - apply VirtualService application configuration"
  shell: |
    echo  "update gateway {{ gateway.key }} in namespace {{ namespace.key }} with application {{ gateway.value.VirtualService }} in namespace {{ app_ns.key }}"
    kubectl get -o yaml vs -n "{{ gateway.value.namespace }}" "{{ gateway.key }}" | \
    yq -y 'del(.spec.http[]? | select(.name=="'"{{ app_vs.key }}"'"))' | \
    yq -y '.spec.http += [{"name":"{{ vs.value.application }}","rewrite":{"uri":"{{ vs.value.network.rewrite | default("/") }}" },"route":[{"destination":{"host":"{{ vs.value.network.svcName | default(vs.value.application) }}.{{ vs.value.namespace }}.svc.cluster.local"{% if vs.value.network.svcPort is defined %},"port":{"number":{{ vs.value.network.svcPort }} }{% endif %}}}],"match":[{"uri":{"prefix":"{{ vs.value.network.prefix | default("/" + vs.value.application) }}"}}] {% if vs.value.network.addition is defined %},{{ vs.value.network.addition }} {% endif %} }]' | \
    kubectl apply -f -
  register: vs_setup
  loop: "{{ gateway.value.VirtualService | dict2items}}"
  loop_control:
    loop_var: vs
##    loop_var: app_ns
  when: gateway.value.VirtualServicXXe is defined

- name: "{{ post_inst }} - output of VirtualService application configuration"
  debug:
    msg: "{{ vs_setup }}"
#    msg: "result: {{ item.rc }} out: {{ item.stdout }} for: {{ item.item.key }}"
#  loop: "{{ vs_setup.results | dict2items }}"
#  when: "'debug' in ansible_run_tags"     
  when: false
