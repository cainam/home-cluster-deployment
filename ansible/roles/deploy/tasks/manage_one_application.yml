- name: set app fact
  set_fact:
    name_prefix: "namespace:{{ namespace.key }} app:{{ application.key }} "
    app: "{{ application.key }}"
        
- name: .{{ name_prefix }} status
  debug:
    msg: "inner namespace: {{ namespace.key }}, application: {{ application.key }}, application git: {{ application.value.git }} helm_options: {{ application.value.helm_options | default('') }}  all values: {{ application.value }}"

- block:
  - name: .{{ name_prefix }} storage
    include_tasks: common/storage.yml
    with_items: "{{ application.value.storage }}"
    loop_control:
      loop_var: storage
  when: application.value.storage is defined
    
- block:
    - name: .{{ name_prefix }} build and fill
      shell: |
        . set_env.sh "{{ namespace.key }}"
         helm:from_git_to_local.sh --platform={{ application.value.platform | default(default_platform) }} --git_source={{ application.value.git }} --git_subdir={{ application.value.subdir }} --git_branch={{ application.value.branch | default("") }} --chart_version={{ application.value.chart_version | default("") }} --appVersion={{ application.value.appVersion | default("") }} --remove_dependencies={{ application.value.remove_dependencies | default("") }} {{ application.value.git_to_local_params | default("") }} 
      register: build_out
  
    - name: .{{ name_prefix }} build output
      debug:
        msg: "{{ item }}"
      loop: "{{ build_out  | dict2items }}"

    - name: .{{ name_prefix }} helm repo refresh
      shell: |
        . set_env.sh "{{ namespace.key }}"
        helm repo add {{ ns }} "{{ helm_repo_base }}{{ ns }}"
        helm repo index "${helm_repo_dir}" --url $helm_url
        helm repo update
  when: "'build' in ansible_run_tags" 

- name: .{{ name_prefix }} files
  include_tasks: files.yml
  loop: "{{ application.value.files | dict2items }}"
  loop_control:
    loop_var: file
  when: application.value.files is defined

- name: .{{ name_prefix }} install or upgrade
  shell: |
    . set_env.sh "{{ namespace.key }}"
     helm upgrade --install -n {{ namespace.key }} {{ application.key }} {{ namespace.key }}/{{ application.key }} {{ applications[namespace.key][application.key].helm_options | default('') }}
  register: out
  when: "application.value.install | default(true)"
  
- name: .{{ name_prefix }} output
  debug:
    msg: "output: item: {{ item }}"
  loop: "{{ out  | dict2items }}"

- name: .{{ name_prefix }} => configure entry in main VirtualService
  shell: |
    kubectl get -o yaml vs -n istio-ingress main | yq -y 'del(.spec.http[]? | select(.name=="'"{{ application.key }}"'"))' | yq -y '.spec.http += [{"name":"{{ application.key }}","rewrite":{"uri":"{{ application.value.network.rewrite | default("/") }}" },"route":[{"destination":{"host":"{{ application.value.network.svcName | default(application.key) }}.{{ namespace.key }}.svc.cluster.local"{% if application.value.network.svcPort is defined %},"port":{"number":{{ application.value.network.svcPort }} }{% endif %}}}],"match":[{"uri":{"prefix":"{{ application.value.network.prefix | default("/" + application.key) }}"}}] {% if application.value.network.addition is defined %},{{ application.value.network.addition }} {% endif %} }]' | kubectl apply -f -
  when: application.value.network.subdomain is not defined and (application.value.install | default(true))

- block:
    - name: .{{ name_prefix }} => configure Gateway for subdomain
      shell: |
        cmd=replace; kubectl get vs -n {{ namespace.key }} {{ application.key }} 2>> /dev/null >> /dev/null || cmd=apply 
        echo -e "apiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: {{ application.key }}\n  namespace: {{ namespace.key }}\nspec:\n  selector:\n    istio: gateway\n  servers:\n  - hosts:\n    - '{{ application.value.network.subdomain }}.my-lb.adm13'\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      credentialName: istio-ingress\n      mode: SIMPLE" | kubectl ${cmd} -f -
    - name: .{{ name_prefix }} => configure VirtualService for subdomain
      shell: |
        cmd=replace; kubectl get vs -n {{ namespace.key }} {{ application.key }} 2>> /dev/null >> /dev/null || cmd=apply
        echo -e "apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: {{ application.key }}\n  namespace: {{ namespace.key }}\nspec:\n  gateways:\n  - {{ namespace.key }}/{{ application.value.network.subdomain }}\n  hosts:\n  - '{{ application.value.network.subdomain }}.my-lb.adm13'\n  http:\n  - directResponse:\n      status: 599\n    match:\n    - uri:\n        prefix: /dummy\n    name: dummy\n  - match:\n    - uri:\n        prefix: /\n    name: {{ application.key }}\n    rewrite:\n      uri: {{ application.value.network.rewrite }}\n    route:\n    - destination:\n        host: {{ application.value.network.svcName | default(application.key) }}.{{ namespace.key }}.svc.cluster.local\n        port:\n          number: {{ application.value.network.svcPort }}" | kubectl ${cmd} -f -
  when: application.value.network.subdomain is defined and application.value.install | default(true)

