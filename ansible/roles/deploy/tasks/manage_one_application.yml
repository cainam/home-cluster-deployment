- name: set app fact
  set_fact:
    name_prefix: "namespace:{{ namespace.key }} app:{{ application.key }} -"
    app: "{{ application.key }}"
        
- name: "{{ name_prefix }} status"
  debug:
    msg: "inner namespace: {{ namespace.key }}, application: {{ application.key }}, application git: {{ application.value.git }} helm_options: {{ application.value.helm_options | default('') }}  all values: {{ application.value }}"

- block:
  - name: "{{ name_prefix }} storage"
    include_tasks: common/storage.yml
    with_items: "{{ application.value.storage }}"
    loop_control:
      loop_var: storage
  when: application.value.storage is defined
    
- block:
  - block:
    - name: "{{ name_prefix }} tempdir for image build"
      tempfile:
        state: directory
        suffix: "-build-image"
      register: build_dir

    - name: "{{ name_prefix }} copy dockerfile"
      template:
        src: "{{ item.dockerfile | default(item.name|default(application.key)~'.dockerfile') }}"
        dest: "{{ build_dir.path }}"
        mode: 0644
      loop: "{{ application.value.image_build }}"

    - name: "{{ name_prefix }} build image"
      shell: |
        set -x
        if [ "{{ item.source }}" != "local" ]; then
          git clone --branch "{{ item.branch | default('latest') }}" "{{ item.source }}"
          bdir="${PWD}"
          git_dir=$(basename "{{ item.source }}")
          git_dir="${git_dir%%.git}/{{ item.subdir|default('') }}""
          cd "${git_dir}"
        fi
        image="{{ registry }}{{ item.section | default('/'~namespace.key~'/')}}{{ item.name | default(application.key) }}:{{ item.tag | default('latest') }}"
        podman build . {{ item.build_args | default("--tls-verify") }} --file "${bdir}/{{ item.dockerfile | default(item.name|default(application.key)~'.dockerfile') }}" --tag "${image}"
        podman push "${image}"
      args:
        chdir: "{{ build_dir.path }}"
      register: build_out
      loop: "{{ application.value.image_build }}"
  
    - debug: var=build_out
      failed_when: false
    when: application.value.image_build is defined
    
  - name: "{{ name_prefix }} build helm"
    shell: |
      . set_env.sh "{{ namespace.key }}"
      helm:from_git_to_local.sh --platform={{ application.value.platform | default(default_platform) }} \
      --git_source={{ application.value.git }} --git_subdir={{ application.value.subdir | default("") }} \
      --git_branch={{ application.value.branch | default("") }} --chart_version={{ application.value.chart_version | default("") }} \
      --appVersion={{ application.value.appVersion | default("") }} --remove_dependencies={{ application.value.remove_dependencies | default("") }} \
      {{ application.value.git_to_local_params | default("") }} 
    register: build_out

  - name: "{{ name_prefix }} build output"
    debug:
      msg: "{{ item }}"
    loop: "{{ build_out  | dict2items }}"

  - name: "{{ name_prefix }} helm repo refresh"
    shell: |
      . set_env.sh "{{ namespace.key }}"
      helm repo add {{ ns }} "{{ helm_repo_base }}{{ ns }}"
      helm repo index "${helm_repo_dir}" --url "${helm_url}"
      helm repo update
  when: "'build' in ansible_run_tags" 

- block:
  - name: "{{ name_prefix }} install storage content"
    include_tasks: storage_content.yml
    when: storage.config is defined and storage.config
    with_items: "{{ application.value.storage }}"
    loop_control:
      loop_var: storage
  when: application.value.storage is defined
    
- name: "{{ name_prefix }} files"
  include_tasks: files.yml
  loop: "{{ application.value.files | dict2items }}"
  loop_control:
    loop_var: file
  when: application.value.files is defined

- name: "{{ name_prefix }} install or upgrade"
  shell: |
    . set_env.sh "{{ namespace.key }}"
    set -x
     helm upgrade --install --reset-values -n {{ namespace.key }} {{ application.key }} {{ namespace.key }}/{{ application.value.chart | default(application.key) }} \
     {{ applications[namespace.key][application.key].helm_options | default('') }} \
     {% if application.value['files']['values']['file'] is defined %}  --values {{ applications[namespace.key][application.key]['files']['values']['tempfile'] }}  {% endif %}
  register: out
  when: "application.value.install | default(true)"
  #failed_when: true
  
- name: "{{ name_prefix }} output"
  debug:
    msg: "{{ item | to_yaml }}"
  loop: "{{ out  | dict2items }}"
  
- block:
  - name: "{{ name_prefix }} manage application requirements"
    include_tasks: manage_application_requirements.yaml
    with_items: "{{ application.value.requires }}"
    loop_control:
      loop_var: requires
  when: application.value.requires is defined

- name: "{{ name_prefix }} debug before vs preparation"
  debug:
    msg: "network defined?: {{ application.value.network | default('no') }} and install?: {{(application.value.install | default(true))}}"
  loop: "{{ out  | dict2items }}"
  
- name: "{{ name_prefix }} record application with gateway for VirtualService"
  set_fact:
    # gateways: "{{ gateways | combine({item.item.key: {'namespace': item.stdout }}, recursive=True) }}"
#    gateways: "{{ gateways | combine({application.value.network.gateway | default(default_gateway): {'applications': {namespace.key: {application.key: application.value}    }  }  }, recursive=True) }}"
    gateways: "{{ gateways | combine(
      {application.value.network.gateway | default(default_gateway): 
        {'VirtualService': [{
          'namespace': namespace.key,
          'application': application.key,
          'network': application.value.network}] } }, list_merge='append', recursive=True) }}"
  when: application.value.network is defined and (application.value.install | default(true))

- name: "{{ name_prefix }} debug gateways"
  debug:
    msg: "gateways: {{ gateways | to_yaml}}"

- block:
  - name: "{{ name_prefix }} affinity - label node"
    shell: |
      kubectl label node {{ application.value.affinity }} {{ application.key }}={{ application.key }}
  when: application.value.affinity is defined

