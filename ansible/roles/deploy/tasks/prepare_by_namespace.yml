- name: set app fact
  set_fact:
    ns: "{{ namespace.key }}"

- block:
  - name: namespace:{{ ns }} - configure
    shell: |
      #kubectl create namespace "{{ namespace.key }}"
      kubectl apply -f - <<EOF
      apiVersion: v1
      kind: Namespace
      metadata:
        name: {{ namespace.key }}
      EOF
      echo "{{ namespace.key }}" | grep -q -e kube -e istio-system || kubectl label namespace "{{ namespace.key }}" istio-injection=enabled
    register: namespace_out
  
  - name: namespace:{{ ns }} namespace management output
    debug:
      msg: "output: item: {{ item }}"
    loop: "{{ namespace_out  | dict2items }}"
  
  - name: create VirtualService for redirections
    shell: |
      kubectl get vs -n istio-ingress main || echo -e 'apiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: main\n  namespace: istio-ingress\nspec:\n  gateways:\n  - istio-ingress/main\n  hosts:\n  - "*.my-lb.adm13"\n  - my-lb.adm13\n  http:\n  - name: "dummy"\n    match:\n    - uri:\n       prefix: /dummy\n    directResponse:\n      status: 404\n' | kubectl apply -f -
    when: namespace.key == "istio-ingress"
  
  - name: create Gateway for redirections
    shell: |
      kubectl get gw -n istio-ingress main 2>/dev/null || echo -e 'apiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: main\n  namespace: istio-ingress\nspec:\n  selector:\n    istio: gateway\n  servers:\n  - hosts:\n    - my-lb.adm13\n    port:\n      name: https\n      number: 443\n      protocol: HTTPS\n    tls:\n      credentialName: istio-ingress\n      mode: SIMPLE\n' | kubectl apply -f -
    when: namespace.key == "istio-ingress"
  run_once: true

- name: prepare by application
  include_tasks: prepare_application.yml
  loop: "{{ namespace.value | dict2items }}"
  loop_control:
    loop_var: application

