---
applications:
#  anon:
#    tor:
#      git: https://github.com/cainam/k8s_at_home.git
#      subdir: charts/tor
#      storage:
#      - name: tor
#        size: 10Mi
  istio-system:
    base: 
      git: https://github.com/istio/istio.git
      branch: "{{ software.istio.version }}"
      subdir: manifests/charts/base
    istiod: 
      git: https://github.com/istio/istio.git
      branch: "{{ software.istio.version }}"
      subdir: manifests/charts/istio-control/istio-discovery
      helm_options: --set global.proxy.privileged=true --set global.tracing.zipkin.address=jaeger-collector.tools:9411 --set pilot.resources.requests.memory=164Mi --set global.proxy.image=istio-system/proxyv2:"{{ software.istio.version }}-gentoo" --set global.proxy_init.image=istio-system/proxyv2:"{{ software.istio.version }}-gentoo"
      git_to_local_params: --fix_source=.pilot.image=istio/pilot:"{{ software.istio.version }}" --fix_source=.global.proxy.image=istio/proxyv2:"{{ software.istio.version }}" --fix_source=.global.proxy_init.image=istio/proxyv2:"{{ software.istio.version }}"
      vars:
        oauth2_proxy: "oauth2-proxy"
      files:
        values:
          file: istiod-mesh.yaml
    istiod-config:
      git: "{{ own_git_url }}"
      subdir: charts/istiod-config
      helm_options: --set PolicyName=ext-authz --set-json 'hosts=["{{ base_domain }}","*.{{ base_domain }}","{{ base_domain_ext }}:*"]' --set-json 'open_access={{ net.open_access | to_json }}' --set gateway="{{ default_gateway }}" --set external_address="{{ base_domain_ext }}:{{ port_ext }}"
  auth:
    ory-commons:
      git: https://github.com/ory/k8s.git
      subdir: helm/charts/ory-commons
      install: false
    hydra:
      git: https://github.com/ory/k8s.git
      subdir: helm/charts/hydra
      git_to_local_params: --fix_source=.watcher.image= --fix_source=.test.busybox.repository= --fix_source=.image.tag="{{ software.hydra.version }}"
      helm_options_for_memory: --set hydra.config.dsn=memory
      helm_options_for_presistent_storage: --set hydra.config.dsn=sqlite:///data/hydra.sqlite?_fk=true --set deployment.extraVolumeMounts[0].name=hydra --set deployment.extraVolumeMounts[0].mountPath=/data --set deployment.extraVolumes[0].name=hydra --set deployment.extraVolumes[0].persistentVolumeClaim.claimName=hydra --set hydra.automigration.type=initContainer --set hydra.automigration.enabled=true 
      helm_options: --set hydra.config.dsn=memory
      remove_dependencies: hydra-maester
      requires:
      - type: default
        name: hydra-config
        namespace: auth
      files:
        values:
          file: hydra-config.yaml
      storage:
      - name: hydra
        size: 5Mi 
      network:
        svcPort: 4444
        svcName: hydra-public
        prefix: /hydra
    hydra-config: # only valid with hydra.config.dsn=sqlite:///data/hydra.sqlite?_fk=true
      git: "{{ own_git_url }}"
      subdir: charts/hydra-config
      helm_options: --set operator.image="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'auth-operator' ) | map(attribute='section') | first }}/auth-operator" --set operator.tag="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'auth-operator' ) | map(attribute='tag') | first }}" --set redirect_url="https://{{base_domain }}{{ oauth2_path }}/callback https://{{ base_domain_ext }}:44354{{ oauth2_path }}/callback" --set-json 'env=[{"name":"PYTHONPATH","value":"/app/backend/:/py_env/lib/python3.12/site-packages/"},{"name":"PATH","value":"/py_env/bin:/bin:/usr/bin"}]'
      images:
      - auth-operator
      storage:
      - name: auth-operator
        size: 2Mi
        type: local_folder
        config: true
      network: true
    idp:
      git: "{{ own_git_url }}"
      subdir: charts/idp
      git_to_local_params: --fix_source=.image.repository= --fix_source=.image.tag=
      helm_options: >-
        --set image.repository=auth/idp --set image.tag="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'idp' ) | map(attribute='tag')|first}}"
        --set hydraAdminUrl=http://hydra-admin.auth:4445 --set hydraPublicUrl=http://hydra-public.auth:4444 --set baseUrl=/idp/ --set mockTlsTermination=noX --set username="{{ user }}" --set password="{{ pass }}" --set mount_path=/x
      images:
      - idp
      network: true
    oauth2-proxy:
      git: https://github.com/oauth2-proxy/manifests.git
      subdir: helm/oauth2-proxy
      helm_options: --set proxyVarsAsSecrets=false 
      git_to_local_params: --fix_source=.image.tag="{{ software.oauth2_proxy.version }}"
      remove_dependencies: redis
      chart: oauth2-proxy
      files:
        values:
          file: oauth2-proxy-config.yaml
      network:
        svcPort: 80
        prefix: /oauth2-hydra
        rewrite: /oauth2-hydra/
  home:
    common:
      git: "{{ own_git_url }}"
      subdir: charts/common
      #branch: common-4.5.2
      install: false
    grott:
      git: "{{ own_git_url }}"
      subdir: charts/grott
    zigbee2mqtt:
      git: "{{ own_git_url }}"
      subdir: charts/zigbee2mqtt
      affinity: k8s-2-int.adm13
      helm_options: >-
        --set zigbee2mqtt.deployment.image.tag="{{ software.zigbee2mqtt.version }}" 
        --set zigbee2mqtt.deployment.image.repository="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'zigbee2mqtt' ) | map(attribute='section') | first }}/zigbee2mqtt"
        --set zigbee2mqtt.deployment.nodeSelector.zigbee2mqtt=zigbee2mqtt --set persistent.enabled=true --set persistent.capacity=100Mi 
      git_to_local_params: --fix_source=.zigbee2mqtt.deployment.image.repository=  --fix_source=.zigbee2mqtt.deployment.image.tag="{{ software.zigbee2mqtt.version }}"
      images:
      - zigbee2mqtt
      network:
        svcPort: 8080
        old_proxy_sidecar: 
          app.kubernetes.io/instance: zigbee2mqtt
      storage:
      - name: zigbee2mqtt
        size: 100Mi
        config: true
    mosquitto:
      git: "{{ own_git_url }}"
      subdir: charts/mosquitto
      git_to_local_params: --fix_source=.image.tag="" --fix_source=.image.repository="" --fix_source=.authentication.passwordFilePath=/mosquitto/data/mosquitto.passwd
      helm_options: >-
        --set image.repository="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'mosquitto' ) | map(attribute='section') | first }}/mosquitto" 
        --set image.tag={{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'mosquitto' ) | map(attribute='tag') | first }}
      images:
      - mosquitto
      storage:
      - name: mosquitto
        size: 1Gi
      network: true
    home-assistant:
      git: "{{ own_git_url }}"
      subdir: charts/home-assistant
      git_to_local_params: --fix_source=.image.tag= --fix_source=.image.repository= --fix_source=.postgresql.image= 
      remove_dependencies: postgresql,mariadb,influxdb
      helm_options: >-
        --set persistence.config.enabled=true --set persistence.config.size=100Mi --set initContainers.waitdb.image=db/postgres:{{ software.postgresql.version }} 
        --set image.repository="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'ha' ) | map(attribute='section') | first }}/ha" 
        --set image.tag={{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'ha' ) | map(attribute='tag') | first }} 
        --set command=python --set-json 'args=["-m","homeassistant","--config","/config"]'  
        --set-json 'env=[
          {"name":"PYTHONPATH","value":"/ha/core:/py_env/lib/python3.12/site-packages:/usr/lib/python3.12/site-packages"},
          {"name":"PATH","value":"/py_env/bin:/bin:/usr/bin"},
          {"name":"TZ","value":"UTC"},
          {"name":"LD_LIBRARY_PATH","value":"/usr/lib/postgresql-17/lib/"}]'
      images:
      - ha
      storage:
      - name: home-assistant-config
        size: 100Mi
        config: true
      network:
        prefix: 
        svcPort: 8123
        gateway: ha-gw
        old_proxy_sidecar: 
          app.kubernetes.io/instance: home-assistant
      requires:
      - type: postgresql
        name: postgresql
        namespace: db
        config:
          database: ha
          username: ha
          password: same
  tools:
    tempo:
      git: https://github.com/grafana/helm-charts.git
      subdir: charts/tempo
      branch:  tempo-1.7.2
      git_to_local_params: --fix_source=.tempo.tag="{{ software.tempo.version }}" --fix_source=.tempoQuery.tag="{{ software.tempo_query.version }}"
    infopage:
      git: "{{ own_git_url }}"
      subdir: charts/infopage
      helm_options: --set image.repository="{{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'infopage' ) | map(attribute='section') | first }}/infopage" --set image.tag={{ images | selectattr('name', 'defined') | selectattr('name', 'equalto', 'infopage' ) | map(attribute='tag') | first }} --set-json 'env=[{"name":"PYTHONPATH","value":"/app/backend/:/py_env/lib/python3.12/site-packages/"}]'
      images:
      - my_py
      storage:
      - name: infopage
        size: 5Mi
        type: local_folder
        config: true
      network: true
    kiali-server:
      git: https://github.com/kiali/helm-charts.git
      subdir: kiali-server
      git_to_local_params: --fix_source=.image.repo=kiali/kiali --fix_source=.image.tag="{{ software.kiali.version }}" --fix_source=.deployment.version_label="{{ software.kiali.version }}" --fix_source=.deployment.image_version="{{ software.kiali.version }}"
      network:
        svcPort: 20001
        svcName: kiali
        prefix: /kiali
        rewrite: /kiali
      helm_options: --set auth.strategy=anonymous --set istio_namespace=istio-system
      files:
        values:
          file: kiali-config.yaml
    kubernetes-dashboard:
      git: https://github.com/kubernetes/dashboard.git
      branch: "{{ software.dashboard.version }}"
      subdir: charts/kubernetes-dashboard
      helm_options: --set protocolHttp=true --set service.externalPort=9090 --set extraArgs="{--enable-insecure-login=false}" --set serviceAccount.name=kubernetes-dashboard --set rbac.clusterReadOnlyRole=true --set metricsScraper.enabled=false --set web.containers.args[0]="--v=2" --set auth.containers.args[0]="--v=2"
      git_to_local_params: --fix_source=.metricsScraper.image= --fix_source=.metricsScraper.enabled=false --fix_source=.kong.image= --fix_source=.kong.enabled=false
      remove_dependencies: metrics-server,ingress-nginx,cert-manager,kong
      network:
        gateway: dashboard-gw
        xxprefix: /kubernetes-dashboard/
        prefix: /
        xgateway: dashboard-gw
        svcPort: 8000
        svcName: kubernetes-dashboard-web
        xxaddition: '"headers":{"request":{"add":{"x-forwarded-prefix":"/kubernetes-dashboard"}}}'
    kube-state-metrics:
      git: https://github.com/prometheus-community/helm-charts.git
      subdir: charts/kube-state-metrics
      branch: kube-state-metrics-5.16.1
      git_to_local_params: --fix_source=.image.tag=v2.10.1
      install: false
    prometheus-node-exporter:
      git: https://github.com/prometheus-community/helm-charts.git
      subdir: charts/prometheus-node-exporter
      branch: prometheus-node-exporter-4.30.3
      git_to_local_params: --fix_source=.image.tag=v1.6.1
      install: false
    prometheus-pushgateway:
      git: https://github.com/prometheus-community/helm-charts.git
      subdir: charts/prometheus-pushgateway
      branch: prometheus-pushgateway-2.7.1
      git_to_local_params: --fix_source=.image.tag=v1.6.2
      install: false
    prometheus:
      git: https://github.com/prometheus-community/helm-charts.git
      subdir: charts/prometheus
      branch: prometheus-25.15.0
      helm_options: --set prometheus-node-exporter.hostRootFsMount.enabled=false --set server.persistentVolume.volumeName=prometheus-server --set server.securityContext.runAsUser=100100 --set server.securityContext.fsGroup=100100 --set server.prefixURL=/prometheus --set server.baseURL="https://{{ base_domain }}/prometheus/" --set alertmanager.enabled=false
      remove_dependencies: alertmanager
      git_to_local_params: --fix_source=.server.image.tag=v2.50.1
      storage: 
      - name: prometheus-server
        type: longhorn
        size: 2Gi
      network:
        svcName: prometheus-server
        rewrite: /prometheus
  db:
    postgresql:
      git: https://github.com/cetic/helm-postgresql.git
      helm_options: | 
        --set postgresql.username="{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='username') | first }}" --set postgresql.password="{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='password') | first }}" --set persistence.storageClass=longhorn --set persistence.size=2Gi --set postgresql.config.listen_addresses="'*'" --set postgresql.pghba='host    all             all             {{ podSubnet }}           trust
        host    all             all             127.0.0.1/32           trust'
      git_to_local_params: --fix_source=.image.tag={{ software.postgresql.version }} --fix_source=.volumePermissions.image.tag={{ software.postgresql.version }} --fix_source=.volumePermissions.image.repository=db/postgres 
      storage: 
      - name: data-postgresql-0
        type: longhorn
        size: 2Gi
    dbperf:
      git: https://github.com/cetic/helm-postgresql.git
      chart: postgresql
      helm_options: --set postgresql.username="{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='username') | first }}" --set postgresql.password="{{ service_secrets | selectattr('type', 'match', 'db') | selectattr('name', 'match', 'postgres') | map(attribute='values') | map(attribute='password') | first }}"
      git_to_local_params: --fix_source=.image.tag={{ software.postgresql.version }} --fix_source=.volumePermissions.image.tag={{ software.postgresql.version }} --fix_source=.volumePermissions.image.repository=db/postgres
      storage: 
      - name: data-dbperf-postgresql-0
        size: 11Gi
  kube-system:
    descheduler:
      git: https://github.com/kubernetes-sigs/descheduler.git
      subdir: charts/descheduler
      branch: "{{ software.descheduler.version }}"
      git_to_local_params: --fix_source=.image.tag={{ software.descheduler.version }}
      helm_options: --set deschedulerPolicy.strategies.RemoveDuplicates.enabled=false --set deschedulerPolicy.strategies.RemovePodsHavingTooManyRestarts.enabled=false --set deschedulerPolicy.strategies.RemovePodsViolatingNodeTaints.enabled=false --set deschedulerPolicy.strategies.RemovePodsViolatingNodeAffinity.enabled=false --set deschedulerPolicy.strategies.RemovePodsViolatingInterPodAntiAffinity.enabled=false --set deschedulerPolicy.strategies.RemovePodsViolatingTopologySpreadConstraint.enabled=false --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.thresholds.cpu=50 --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.thresholds.memory=40 --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.targetThresholds.cpu=60  --set deschedulerPolicy.strategies.LowNodeUtilization.params.nodeResourceUtilizationThresholds.targetThresholds.memory=43 --set cmdOptions.v=4 --set deschedulerPolicy.evictLocalStoragePods=true --set schedule="*/10 * * * *"
  longhorn-system:
    longhorn:
      git: https://github.com/longhorn/longhorn.git
      subdir: chart
      branch: v1.7.2
      lm_options: --set defaultSettings.defaultDataPath=/data/longhorn-1 --set defaultSettings.logLevel=Trace
      xxhelm_options: --set defaultSettings.logLevel=Trace --set namespaceOverride=storage
      elm_options: --set defaultSettings.disableRevisionCounter=null --set defaultSettings.priorityClass=null --set defaultSettings.createDefaultDiskLabeledNodes=true --set defaultSettings.defaultDataPath=/data/longhorn-1
      helm_options: --set defaultSettings.logLevel=Info
      network:
        svcName: longhorn-frontend
        prefix: /longhorn
        old_proxy_sidecar: 
         app: longhorn-ui
      storage:
      - name: longhorn-1
        type: local
        size: 30Gi
        mountpoint: /var/lib/longhorn
