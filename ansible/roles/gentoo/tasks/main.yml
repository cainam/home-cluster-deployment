---

- name: groups
  group:
    name: "{{ item.name }}"
    gid: "{{ item.gid }}"
  loop:
    - name: k8s-prometheus
      gid: 100100
    - name: k8s-keycloak
      gid: 100200

- name: users
  user: 
    create_home: false
    name: "{{ item.name }}"
    group: "{{ item.group }}"
    uid: "{{ item.uid }}"
  loop:
    - name: k8s-prometheus
      uid: 100100
      group: k8s-prometheus
    - name: k8s-keycloak
      uid: 100200
      group: k8s-keycloak

- name: mount /data
  mount:
    path: /data
    src: /dev/sda1
    fstype: ext4
    opts: noatime
    state: mounted

- name: ensure required directories exist
  file:
    path: "{{ item.path }}"
    state: directory
    mode: "{{ item.perm }}"
  loop:
    - path: /etc/modprobe.d
      perm: u=rwx,g=rx,o=rx
    - path: /etc/wpa_supplicant
      perm: u=rwx,g=rx,o=rx
    - path: "{{ shared_mounts }}"
      perm: u=rwx,g=rx,o=rx
    - path: /etc/modules-load.d
      perm: u=rwx,g=rx,o=rx
    - path: /usr/local/share/ca-certificates/
      perm: u=rwx,g=rx,o=rx
    - path: "{{ gluster_directory }}/bricks"
      perm: u=rwx,g=rx,o=rx
    - path: /etc/autofs
      perm: u=rwx,g=rx,o=rx
    - path: /var/lib/iwd
      perm: u=rwx,g=rx,o=rx
    - path: /etc/iwd
      perm: u=rwx,g=rx,o=rx
    - path: /etc/cron.hourly
      perm: u=rwx,g=rx

- name: auto.master
  lineinfile: 
    path: /etc/autofs/auto.master
    regexp: "^{{ shared_mounts }}"
    line: "{{ shared_mounts }} /etc/autofs/gluster.autofs"
    backup: yes
    create: true

- name: symlinks for CA
  copy:
    src: "{{ cert_path }}/{{ item }}"
    dest: "{{ system_local_certs }}/{{ item }}"
    owner: root
    group: root
  register: ca
  loop: "{{ local_ca_files }}"

- name: update CA certificates
  shell: /usr/sbin/update-ca-certificates
  when: ca.changed

- name: rc.conf
  lineinfile:
    path: /etc/rc.conf
    regexp: "^{{ item.setting }}"
    line: "{{ item.line }}"
    insertafter: "{{ item.setting }}"
    backup: yes
  loop:
    - line: 'rc_logger="YES" # write rc logs to /var/log/rc.log, otherwise boot logs are lost'
      setting: rc_logger
    - line: 'rc_verbose="yes" # be verbose'
      setting: rc_verbose

- name: hostname in /etc/conf.d
  lineinfile:
    path: "/etc/conf.d/{{ item.file }}"
    regexp: "^{{ item.setting }}"
    line: "hostname=\"{{ item.line }}\""
    backup: yes
  loop:
    - line: "{{ hostvars[inventory_hostname].ansible_fqdn }}"
      setting: hostname
      file: hostname

- name: deploy from files
  copy:
    src: "{{ item.file }}"
    dest: "{{ item.dest }}"
    mode: preserve
    backup: "{{ item.backup | default('yes') }}"
  loop:
    - file: lighttpd.conf
      dest: /etc/lighttpd/
    - file: 02-cgroup-manager.conf
      dest: /etc/crio/crio.conf.d/
    - file: 03-allowed-devices.conf
      dest: /etc/crio/crio.conf.d/
    - file: scripts/
      dest: /usr/local/bin/
    - file: world
      dest: /var/lib/portage/
    - file: ipv6.conf
      dest: /etc/modprobe.d/
    - file: k8s.conf
      dest: /etc/modules-load.d/
    - file: portage/
      dest: /etc/portage/
    - file: init.d/
      dest: /etc/init.d/
    - file: haproxy.cfg
      dest: /etc/haproxy/
    - file: keepalived.conf
      dest: /etc/keepalived/
    - file: keepalived
      dest: /etc/sysctl.d/
    - file: registries.conf
      dest: /etc/containers/
    - file: conf.d/
      dest: /etc/conf.d/
    - file: gluster.autofs
      dest: /etc/autofs/
    - file: syslog-ng.conf
      dest: /etc/syslog-ng/
    - file: logrotate.d/
      dest: /etc/logrotate.d/
    - file: iwd.conf
      dest: /etc/iwd/main.conf

- name: include secrets (wlan, ssh_host_keys)
  include_vars: "{{ local_only }}/secrets"

- name: first line in iwd security file
  lineinfile:
    path: /var/lib/iwd/AdM13.psk
    insertbefore: BOF
    create: true
    line: "[Security]"

- name: passphrase for iwd
  lineinfile:
    path: /var/lib/iwd/AdM13.psk
    regexp: '^Passphrase='
    line: "Passphrase={{ psk }}"

- name: PreSharedKey for iwd
  lineinfile:
    path: /var/lib/iwd/AdM13.psk
    regexp: '^PreSharedKey='
    line: "PreSharedKey={{ PreSharedKey }}"

- name: create /etc/ssh/known_hosts
  copy:
    content: |
      {% for a in ssh_host_keys %}
      {{ a }}
      {% endfor %}
    dest: /etc/ssh/ssh_known_hosts

#- name: get root device
#  shell: |
#    l=$(blkid --output export --match-token LABEL=root | grep ^PARTUUID=)
#    n_l=$(echo "${l}" | wc -l )
#    if [ "${l}" = "" ];then
#      echo "/dev/mmcblk0p2"
#    elif [ $n_l -eq 1 ];then
#      echo "${l}"
#    else
#      exit -1
#    fi
#  changed_when: false
#  register: root_dev

- name: deploy from templates
  vars: 
    data_uuid: '{{ ansible_mounts | selectattr("mount","==","/data") | map(attribute="uuid") | first }}'
#    boot_device: '{{ ansible_mounts | selectattr("mount","==","/boot") | map(attribute="uuid") | default(default_boot_device, true) }}' # replaced by static host variables boot_uuid in inventory file, reason: tricky to handle device names and prefixes such as UUID= and UUID is not available when /boot is not mounted
  template:
    src: "{{ item.file }}"
    dest: "{{ item.dest }}"
    backup: "{{ item.backup | default('yes') }}"
  loop:
    - file: hosts
      dest: /etc/
    - file: fstab
      dest: /etc/
    - file: make.conf
      dest: "/etc/portage/make.conf"
    - file: wpa_supplicant.conf
      dest: "/etc/wpa_supplicant/wpa_supplicant.conf"
    - file: net
      dest: "/etc/conf.d/net"
    - file: conf.d/registry
      dest: /etc/conf.d/
    - file: conf.d/helm
      dest: /etc/conf.d/

- name: mount boot
  shell: mountpoint -q /boot || mount /boot
  changed_when: false 

- name: deploy from templates to /boot
  vars:
  template:
    src: "{{ item.file }}"
    dest: "{{ item.dest }}"
    backup: "{{ item.backup | default('yes') }}"
  loop:
    - file: cmdline.txt
      dest: /boot/
      backup: no
    - file: config.txt
      dest: /boot/
      backup: no


- name: symlinks for net.lo and localtime
  file:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    owner: root
    group: root
    state: link
    force: true
  loop:
    - src: net.lo
      path: /etc/init.d/net.end0
    - src: "/usr/share/zoneinfo/{{ timezone }}"
      path: /etc/localtime

- name: link deploy cron
  file:
    src: /usr/local/bin/deploy_gentoo.sh
    dest: /etc/cron.daily/deploy_gentoo.sh
    state: link
  when: gentoo_build is defined

- name: unlink deploy cron
  file:
    dest: /etc/cron.daily/deploy_gentoo.sh
    state: absent
  when: gentoo_build is not defined

- name: set date if year is 1970
  shell: date +%Y | ( grep -q "^1970$" && date -s "{{ now(fmt='%Y-%m-%d %H:%M:%S') }}" ) || echo "date ok"

- name: get hostname of Ansible control node
  connection: local
  run_once: true
  delegate_to: localhost
  set_fact:
    ansible_controller_hostname: "{{ lookup('pipe', 'hostname') }}"

- name: install git directly if /var/db/repos/gentoo/.git is empty to allow emerge-sync (needed for initial installation)
  shell: |
    if [ ! -d "/var/db/repos/gentoo/.git" ]; then
      profile_dir=/var/db/repos/gentoo/profiles
      rsync -a {{ ansible_controller_hostname }}:${profile_dir} /tmp
      mv /etc/portage/make.profile /etc/portage/make.profile.bck || true
      ln -s /tmp/profiles/default/linux/arm64/23.0 /etc/portage/make.profile
      rsync -a {{ ansible_controller_hostname }}:/var/cache/binpkgs/Packages /var/cache/binpkgs/Packages
 
      binpkgs="/var/cache/binpkgs"
      atoms=$(USE="adns alt-svc ftp hsts http2 http3 httpsrr imap openssl pop3 psl quic smtp ssl tftp websockets" ACCEPT_LICENSE="*" emerge --pretend --usepkg dev-vcs/git 2> /dev/null | grep "binary  N" | cut -d "]" -f 2 | cut -d " " -f 2 | sed -e 's/-[0-9].*$//g')
      atoms_iwd=$(ACCEPT_LICENSE="*" emerge -1 --usepkg --pretend net-wireless/iwd 2> /dev/null | grep "binary  N" | cut -d "]" -f 2 | cut -d " " -f 2 | sed -e "s/-[0-9].*$//g")
      #atoms="$(ACCEPT_LICENSE='*' emerge --pretend --usepkg dev-vcs/git 2> /dev/null | grep 'binary  N' | cut -d ']' -f 2 | cut -d ' ' -f 2 | sed -e 's/-[0-9].*$//g'")
      for atom in ${atoms} ${atoms_iwd}; do
        pkg_dir=${binpkgs}/${atom}
        mkdir -p ${pkg_dir}
        rsync -a {{ ansible_controller_hostname }}:${pkg_dir}/* ${pkg_dir}/
        ACCEPT_LICENSE="*" emerge -1 --usepkg --nodeps ${atom}
      done
      rsync -a {{ ansible_controller_hostname }}:/lib/modules/$(uname -r) /lib/modules/
      rsync -a k8s-2-int.adm13:/lib/firmware /lib
      /etc/init.d/dbus start
      /etc/init.d/iwd start
      rm /etc/portage/make.profile && mv /etc/portage/make.profile.bck /etc/portage/make.profile || true
    fi

- name: emerge sync
  shell: emerge --sync
  ignore_errors: true
#  when: "'emerge' in ansible_run_tags" # instead of using tags:, because it is not possible to use never inside here, when it is already used on the outside

- name: portage profile
  shell: export LC_ALL=C && eselect profile show && eselect profile set default/linux/arm64/23.0 #/split-usr
  
- name: build and deploy
  block:
  - name: park /boot/cmdline.txt and /boot/config.txt to enable sys-boot/raspberrypi-firmware installation (breaks for hard check in ebuild)
    shell: test -f "{{ item }}" && mv "{{ item }}" "{{ item }}.deployed"
    loop:
    - /boot/cmdline.txt
    - /boot/config.txt
  
  - name: emerge build
    shell: emerge --keep-going --verbose --update --deep --newuse --with-bdeps=y @world
    when: gentoo_build is defined and 'emerge' in ansible_run_tags

  - name: link check_and_fix.sh cron
    file:
      src: /usr/local/bin/check_and_fix.sh
      dest: /etc/cron.hourly/check_and_fix.sh
      state: link
 
  - name: emerge deploy
    shell: emerge --keep-going --verbose --update --deep --newuse --with-bdeps=y @world
    when: gentoo_build is not defined and 'emerge' in ansible_run_tags
  
  always:
  - name: un-park /boot/cmdline.txt and /boot/config.txt to enable sys-boot/raspberrypi-firmware installation (breaks for hard check in ebuild)
    shell: test -f "{{ item }}.deployed" && mv "{{ item }}.deployed" "{{ item }}"
    loop:
    - /boot/cmdline.txt
    - /boot/config.txt
  
- name: eclean distfiles
  shell: eclean --deep distfiles
  when: gentoo_build is defined and 'emerge' in ansible_run_tags
 
- name: eclean packages
  shell: eclean packages

- name: emerge depclean
  shell: emerge --depclean

- name: emerge preserved rebuild
  shell: emerge @preserved-rebuild
  when: gentoo_build is defined and 'emerge' in ansible_run_tags

- name: emerge preserved rebuild
  shell: emerge @preserved-rebuild
  when: gentoo_build is not defined and 'emerge' in ansible_run_tags

- name: install additional modules from Ansible Galaxy
  shell: ansible-galaxy collection install gluster.gluster --upgrade #--collections-path /usr/lib/python3.12/site-packages/ansible_collections

#- name: disable services
#  service:
#    name: "{{ item }}"
#    enabled: no
#    state: stopped
#  loop:
- name: only enable and reload services, but don't force a restart 
  service:
    name: "{{ item }}"
    enabled: yes
    state: reloaded
  loop:
    - keepalived
    - autofs
    - sshd
    - haproxy
    - crio
    - syslog-ng

- name: enable and restart services
  service:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  loop:
    - net.end0
    - chronyd
    - brickmount
    - glusterd 
    - cronie
    - cpupower
    - iscsid
  ignore_errors: yes

- name: gluster
  import_tasks: gluster.yml
  
- name: put certificates and keys in place
  copy:
    content: "{{ lookup('file', '{{ cert_path }}/FreeAsABird/subject_keys/{{ item.name }}.pem') }}\n{{ lookup('file', '{{ cert_path }}/FreeAsABird/certs/{{ item.name }}.crt') }}"
    dest: "{{ item.dest }}/{{ item.name }}.pem"
  loop: "{{ certs }}"
  throttle: 1
    
- name: put certificate keys in place
  copy:
    src: "{{ cert_path }}/FreeAsABird/subject_keys/{{ item.name }}.pem"
    dest: "{{ item.dest }}/{{ item.name }}.key"
  loop: "{{ certs }}"
  throttle: 1
    
- name: put certificates in place
  copy:
    src: "{{ cert_path }}/FreeAsABird/certs/{{ item.name }}.crt"
    dest: "{{ item.dest }}/{{ item.name }}.crt"
  loop: "{{ certs }}"
  throttle: 1

