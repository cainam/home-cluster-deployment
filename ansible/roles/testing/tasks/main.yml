- block:
   ## testing examples: '\{\"limit_application\":[\"x\",\"y\"]}'  '\{\"limit_application\":\"x1y\"}' '{"limit_application":[infopage,tor],"limit_namespace":[tools]}'
   ## '{"limit_application":[1a1],"limit_namespace":[ns2]}'

  #- set_fact:
      #apps: "{{ applications }}"

  #- name: assign Ansible extra-vars values to be manipulabled
    #set_fact:
      #only_ns: "{{ limit_namespace }}"
    #when: limit_namespace is defined

  #- name: assign Ansible extra-vars values to be manipulabled
    #set_fact:
      #only_apps: "{{ limit_application }}"
    #when: limit_application is defined
    
  #- debug:
      #msg: "only_apps:{{ only_apps }}"
    #when: only_apps is defined and "'debug_only' in ansible_run_tags"

  #- set_fact:
      #only_apps: "{{[only_apps,]}}"
    #when: only_apps is string
    
  #- set_fact:
      #only_ns: "{{[only_ns,]}}"
    #when: only_ns is string
    
  #- debug:
      #msg: "only_ns:{{ only_ns }}"
    #when: only_ns is defined and "'debug_only' in ansible_run_tags"

## add gateways to applications
  #- name: apply default_gateway_namespace to all gateways missing it
    #set_fact:
      #gateways: "{{ gateways | combine({gateway.key: {'namespace': default_gateway_namespace }}, recursive=true) }}"
    #loop: "{{gateways | dict2items}}"
    #loop_control:
      #loop_var: gateway
    #when: gateway.value.namespace is not defined

  #- name: gateway_default_namespace populated to all gateways (to avoid checking this over and over again)
    #debug:
      #msg: 'gateways: {{ gateways | to_yaml }}'
    #when: "'debug_gw' in ansible_run_tags"

  #- name: combine gateway deployment into applications # all raw items have to be treated before! # merge from gateway_install + optional additional_ports on individual gateway
    #set_fact:
      #apps: "{{ apps | combine(
         #{gateway.value.namespace: 
           #{gateway.key: gateway_install | combine({'ports': gateway.value.additional_ports | default({}) | list, 'type': 'gateway' }, list_merge='append', recursive=true)}}, recursive=true)}}"
    #loop: "{{gateways | dict2items}}"
    #loop_control:
      #loop_var: gateway

  #- name: application list with gateways added
    #debug:
      #msg: 'apps: {{ apps | to_yaml }}'
    #when: "'debug_gw' in ansible_run_tags"

## flatten app list and make namespace an attribute
  #- debug: 
      #msg: "{{item.key}}: {{ item.value }}\n{{ names | zip(item.value| dict2items| map(attribute='value') ) | to_nice_yaml }}" # create array from names and application values
    #vars:
      #app_name: "{{ item.value | dict2items | map(attribute='key') }}" # get application name
      #names: "{{ (app_name) | zip(([item.key]*(app_name|length))   ) }}" # create array of application and namespace name
    #loop: "{{ apps |dict2items}}"

  #- name: flatten app list - add arrays of namespace and application name to each application dict
    #set_fact:
      #app_temp: "{{ app_temp | default([]) + (names | zip(item.value| dict2items| map(attribute='value') )) }}" # create array from names and application values
    #vars:
      #app_name: "{{ item.value | dict2items | map(attribute='key') }}" # get application name
      #names: "{{ (app_name) | zip(([item.key]*(app_name|length))   ) }}" # create array of application and namespace name
    #loop: "{{ apps |dict2items}}"

  #- name: debug app_temp
    #debug:
      #msg: "app_temp:\n{{ app_temp  }}"

  #- name: flatten app list - transform temporary array values of namespace and application name into dict items
    #vars:
      #y: "{{ {'namespace':item[0][1],'name':item[0][0]} | combine(item[1]) }}" # turn names array item into dict
    #set_fact:
      #app_list: "{{ (app_list|default([])) + [y] }}"
    #loop: "{{ app_temp }}"

  #- name: app_list
    #debug: 
      #msg: "app_list:\n{{ app_list | to_nice_yaml }}"

## add gateways to requires:
  #- name: debug - add gateways as application requirements
    #vars:
      #my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      #gw: "{{ app.network.gateway | default(default_gateway) }}"
      #rq: "{{ app.requires|default([])+[{'name': gw, 'namespace': gateways[gw].namespace}] }}"
    #debug: 
      #msg: "my_idx:{{ my_idx }}\ngateway:{{ gw }}\nrq: {{rq}}\ngw_ns: {{gateways[gw].namespace}}\nnew app: {{ app  | combine({'requires': rq }, recursive=true) | to_nice_yaml}}"
    #loop: "{{ app_list | selectattr('network', 'defined')  }}"
    #loop_control:
      #loop_var: app

  #- name: debug - add gateways as application requirements
    #vars:
      #my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      #gw: "{{ app.network.gateway | default(default_gateway) }}"
      #rq: "{{ app.requires|default([])+[{'name': gw, 'namespace': gateways[gw].namespace}] }}"
      #new_entry: "{{app  | combine({'requires': rq }, recursive=true) }}"
    #set_fact:
      #app_list: "{%- set _ = app_list.pop(my_idx|int) %}{{app_list+[new_entry]}}"
    #loop: "{{ app_list | selectattr('network', 'defined')  }}"
    #loop_control:
      #loop_var: app

  #- name: app_list
    #debug: 
      #msg: "app_list:\n{{ app_list | to_nice_yaml }}"

## if namespace limitation given, add all applications of the namespace(s) to the list of limited applications
  #- name: apps from limit_namespace
    #block:
    #- debug: 
       #msg: "{{ item }}: apps: {{ app_list | selectattr('namespace', 'eq', item)| map(attribute='name') }}"
      #loop: "{{ only_ns }}"
    #- set_fact:
        #only_apps: "{{ (only_apps|default([])) + app_list | selectattr('namespace', 'eq', item)| map(attribute='name') }}"
      #loop: "{{ only_ns }}"
    #when: only_ns is defined

  #- debug:
      #msg: "only_apps prepared:{{ only_apps }}"
    #when: only_apps is defined

## combine all multi-level requirements to requires
### testing Jinja2: https://j2live.ttl255.com/
  #- name: debug - recursive requirements
    #vars:
      #my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      ## s1: "{%- r_list=[app.name]\nset x1='sdf' %}{{x1}}"
      ##s1: |
      ##  {% set testing = 'it worked' %}
      ##  {% set another = testing %}
      ##  {{ another }}
      #app_deps: |
        #{%- set loop_data={"reqs":[app.name],"app_list": app_list, 'all_req': []} -%}
        #{# length: {{ loop_data.reqs|length }} loop_data: {{ loop_data}}  #}
        #{%- for b in range(0,1000,1)  if (loop_data.reqs|length|int > 0) %} 
        #{%- set current=loop_data.reqs.pop() %}
        #{%- set req = ((app_list | selectattr('name','eq',current)|list)[0]['requires'])  | default([])  | map(attribute='name' )| list %}
        #{%- set full_req = (app_list | selectattr('name','eq',current)|list)[0]['requires'] | default([]) %}
        #{%-  set d = loop_data.update( {'reqs':  loop_data.reqs + req    } ) %}
        #{%-  set d = loop_data.update( {'all_req':  (loop_data.all_req + full_req) | unique     } ) %}
        #{# current:{{current}} reqs left: {{loop_data.reqs}} req: {{ req }} all_req: {{ loop_data.all_req  }} #}
        #{%- endfor %}
        #{{ loop_data.all_req }} 
      #new_app: "{{ app | ansible.utils.remove_keys(target=['requires'])| combine({'requires': app_deps}) }}"
    #debug: 
      #msg: "my_idx:{{ my_idx }}\napp_deps:{{app_deps}}\nnew_app:{{new_app}}"
    #loop: "{{ app_list | selectattr('requires', 'defined')  }}"
    #loop_control:
      #loop_var: app

  #- name: set - recursive requirements
    #vars:
      #my_idx: "{{ app_list | ansible.utils.index_of('eq', app.name, 'name') }}"
      ## s1: "{%- r_list=[app.name]\nset x1='sdf' %}{{x1}}"
      ##s1: |
      ##  {% set testing = 'it worked' %}
      ##  {% set another = testing %}
      ##  {{ another }}
      #app_deps: |
        #{%- set loop_data={"reqs":[app.name],"app_list": app_list, 'all_req': []} -%}
        #{# length: {{ loop_data.reqs|length }} loop_data: {{ loop_data}}  #}
        #{%- for b in range(0,1000,1)  if (loop_data.reqs|length|int > 0) %} 
        #{%- set current=loop_data.reqs.pop() %}
        #{%- set req = ((app_list | selectattr('name','eq',current)|list)[0]['requires'])  | default([])  | map(attribute='name' )| list %}
        #{%- set full_req = (app_list | selectattr('name','eq',current)|list)[0]['requires'] | default([]) %}
        #{%-  set d = loop_data.update( {'reqs':  loop_data.reqs + req    } ) %}
        #{%-  set d = loop_data.update( {'all_req':  (loop_data.all_req + full_req) | unique     } ) %}
        #{# current:{{current}} reqs left: {{loop_data.reqs}} req: {{ req }} all_req: {{ loop_data.all_req  }} #}
        #{%- endfor %}
        #{{ loop_data.all_req }} 
      #new_app: "{{ app | ansible.utils.remove_keys(target=['requires']) | combine({'requires': app_deps}) }}"
    #set_fact: 
      #app_list: "{%- set _ = app_list.pop(my_idx|int) %}{{app_list+[new_app]}}"
    #loop: "{{ app_list | selectattr('requires', 'defined')  }}"  # process only those applications which have requirements set
    #loop_control:
      #loop_var: app

  #- name: app_list
    #debug: 
      #msg: "app_list:\n{{ app_list | to_nice_yaml }}"

## extend only_apps with depenencies
  #- block: 
    #- name: debug - addition of dependencies to limited application list
      #vars:
        #add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | selectattr('requires', 'defined') | map(attribute='requires'))[0]|default([]) |map(attribute='name' )|default([])  | list }}" 
        ## add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | selectattr('requires', 'defined') | map(attribute='requires')) | map(attribute='name') | to_nice_yaml }}" 
      #debug:
        #msg: "reqs: \n{{ add_reqs }}"
      #loop: "{{ only_apps }}"

    #- name: determine additional applications for limited application list from dependencies
      #vars:
        #add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | selectattr('requires', 'defined') | map(attribute='requires'))[0]|default([]) |map(attribute='name' )|default([])  | list }}" 
        ## add_reqs: "{{ (app_list | selectattr('name', 'eq', item) | map(attribute='requires'))[0] | map(attribute='name') }}"
      #set_fact:
        #reqs: "{{ reqs|default([]) + add_reqs }}"
      #loop: "{{ only_apps }}"

    #- name: update additional applications for limited application list from dependencies
      #set_fact:
        #only_apps: "{{ (reqs + only_apps) | unique }}"

    #- debug:
        #msg: "only_apps:\n{{ only_apps }}"

    #when: "'deps' in ansible_run_tags" 

## remove all that is no longer required
  #- name: build list of what can be removed
    #vars:
      #current_ns:
        #ns: "{{ item.ns }}"
        #apps2remove: "{{ item.app | dict2items | map(attribute='key') | difference(only_apps) }}"
    #set_fact:
      #removal_list: "{{ removal_list | default([]) + current_ns.apps2remove }}"
    #loop: "{{ apps | dict2items(key_name='ns', value_name='app') }}"

  #- debug:
      #msg: "removal_list=> {{ removal_list }}"

  #- name: remove items which are not required
    #set_fact:
      #apps: "{{ apps | ansible.utils.remove_keys(removal_list) }}"

  #- debug:
      #msg: "with apps removed that are not required:\n{{ apps | to_nice_yaml }}"

  #- name: just fail
    #ansible.builtin.fail:
      #msg: let's stop here
    #when: true
##### ALL MOVED TO roles/deploy/tasks/prepare_deployment.yaml    


     # didn't succeed for multi-level requirements
  - name: test how to apply nested requirements
    when: false
    block:
    - name: requires
      debug: 
        msg: "{{ app_list | selectattr('requires', 'defined') }}"

    - name: requires
      vars:
        dep_idx: "{{ app_list | ansible.utils.index_of('eq', item.1.name, 'name') }}"
        dep_idx_chk: "{{ app_list | ansible.utils.index_of('eq', item.1.namespace, 'namespace') }}"
        # ensure required_by exist
        y: "{{ app_list[dep_idx|int] | combine({'required_byx': ''}, list_merge='keep') }}"
        z: "{{ y | combine({'required_by': (y.required_by | default([]))+[{'name': item.0.name,'namespace': item.0.namespace}]   }, list_merge='replace') }}"
        z2: "{{ z | combine({'required_by': (z.required_by | default([]))+[{'name': item.0.name}]   }, list_merge='replace') }}"
        # remove maybe with [i for i in list1 if i not in list2] or better: set _ = my_list.pop(index) 
        #n: "{% [app_list[i] for i in range(len(app_list)) ] %}" # if i != %}{{dep_idx}}{% ] %}"
        #n: "{{ [i for i in range(len(app_list)) ] }}" # if i != %}{{dep_idx}}{% ] %}"
        n: "{%- set a = [] %}
            {%- for i in range(app_list | length): %}
            {%-   set _ = a.append(i) if i != dep_idx|int %} 
            {%- endfor %}
            {%- set b = a  %}
            {{b}}"
        m: "{%- set _ = app_list.pop(dep_idx|int) %}"
      debug: 
        msg: "item: {{ item }}\nitem.0:{{ item.0 }}\nitem.1:{{ item.1 }}\ndep_idx:{{dep_idx}} ({{dep_idx_chk}})\ny:{{y}}\nz:{{z}}\nz2:{{z2}}\nn:{{n}}\nm:{{m}}"
      loop: "{{ app_list| selectattr('requires', 'defined') | subelements('requires') }}"

    - name: add required_by
      vars:
        dep_idx: "{{ app_list | ansible.utils.index_of('eq', item.1.name, 'name') }}"
        old_entry: "{{ app_list[dep_idx|int] }}"
        new_entry: "{{ old_entry | combine({'required_by': (old_entry.required_by | default([]))+[{'name': item.0.name,'namespace': item.0.namespace}]   }, list_merge='replace') }}"
      set_fact:
        app_list: "{%- set _ = app_list.pop(dep_idx|int) %}{{app_list+[new_entry]}}"
      loop: "{{ app_list| selectattr('requires', 'defined') | subelements('requires') }}"

    - name: app_temp 2 dict
      debug: 
        msg: "{{ item }}"
      loop: "{{ app_list}}"

  #recursive
  #2. remove items with no "requires"
  #3. move requires of item to required_by item
  #end option1 if requires exists only for item that have no requested_by anymore
  #end option2 no number of moves is 0

    - name: recursive move
      vars:
        my_idx: "{{ app_list | ansible.utils.index_of('eq', item.0.name, 'name') }}"
      include_tasks: lift_reqs.yaml
      loop: "{{ app_list| selectattr('requires', 'defined') | subelements('requires') }}"
      # lift_reqs:
      # loop with idx
      # 1. add requires of requirement to idx
      # 2. new include 

    - name: using fail and when together
      ansible.builtin.fail:
        msg: let's stop here 

  - name: build list of what can be removed
    vars:
      current_ns:
        ns: "{{ item.ns }}"
        apps: "{{ item.app | dict2items(key_name='app', value_name='data') }}"
        apps2: "{{ item.app | dict2items | map(attribute='key') | product([item.ns]) }}" # but only_apps has no namespace, so difference cannot be made
        apps3: "{{ item.app | dict2items | map(attribute='key') | difference(only_apps) }}"
    debug:
      msg: "transform: ns {{ current_ns.ns }} apps: {{ current_ns.apps }} apps2: {{ current_ns.apps2 | to_nice_yaml }} apps3: {{ current_ns.apps3 }}"
    loop: "{{ apps | dict2items(key_name='ns', value_name='app') }}"

  - debug:
      msg: "only_apps:=> {{ apps | list }}"

  - debug:
      msg: "ns_loop list list => {{ apps[item] | list }}"
    loop: "{{ apps | list }}"

  - debug:
      msg: "dict2items => {{ apps | dict2items | map(attribute='value') }}"
 
  - debug:
      msg: "dict2items loop => {{ item }}"
    loop: "{{ apps | dict2items | map(attribute='value') }}" # loops over namespaces
 
  - name: only with requires
    debug:
      msg: "dict2items lists_union => {{ {} | combine( apps | dict2items | map(attribute='value') | community.general.lists_union(flatten=true) ) }}"
       
  - name: only with requires # only checks first level of dependencies
    debug:
      msg: "dict2items => {{ apps | dict2items | map(attribute='value') | join() | selectattr('requires', 'defined')}}"
    when: item.key in only_apps
    loop: "{{ {} | combine( apps | dict2items | map(attribute='value') | community.general.lists_union(flatten=true) ) | dict2items }}"
 
  - debug:
      msg: "dict2items => {{ apps | dict2items | map(attribute='value')| selectattr('requires', 'defined') }}"
 
  - vars:
      reqs: "{{ item.value }}"
    debug:
      msg: "ns_loop dict2items =>item:  {{item }} reqs: {{ reqs }}"
    loop: "{{ apps | dict2items }}"
 
  - debug:
      msg: "only => {{ apps [item] | dict2items | map(attribute='key') | intersect(only_apps) }}"
    loop: "{{ apps | list }}"
 
  - name: build list of what can be removed
    vars:
      current_ns:
        ns: "{{ item.ns }}"
        apps: "{{ item.app | dict2items(key_name='app', value_name='data') }}"
        apps2: "{{ item.app | dict2items | map(attribute='key') | product([item.ns]) }}" # but only_apps has no namespace, so difference cannot be made
        apps3: "{{ item.app | dict2items | map(attribute='key') | difference(only_apps) }}"
    set_fact:
      removal_list: "{{ removal_list | default([]) + current_ns.apps3 }}"
      removal_list_products: "{{ removal_list_products | default([]) + current_ns.apps2 }}"
#    debug:
#      msg: "transform: ns {{ current_ns.ns }} apps: {{ current_ns.apps }} apps2: {{ current_ns.apps2 }} apps3: {{ current_ns.apps3 }}"
    loop: "{{ apps | dict2items(key_name='ns', value_name='app') }}"

  - debug:
      msg: "removal_list=> {{ removal_list }}"

  - debug:
      msg: "removal_list_products=> {{ removal_list_products }}"

  - name: remove items which are not required
    debug:
      msg: "remove_keys: {{ apps | ansible.utils.remove_keys(removal_list) }}"

  - debug:
      msg: "only_apps item: {{ item }}"
    loop: "{{ only_apps }}"

# next: 1. map apps with ns into namepace, 2. map apps off namespace into contruct, 3. add gateway , 4. add dependencies

  - name: using fail and when together
    ansible.builtin.fail:
      msg: let's stop here
  when: true
  run_once: true
