images:
- name: base
  tag: "{{ builder.portage }}"
  section: local
  type: gentoo-image-builder
  test: sh -c 'busybox sh --help'
  build:
    packages: busybox
    finish_rootfs_build: ln -s usr/lib "${ROOT}/lib" && "${ROOT}"/bin/busybox --install "${ROOT}/bin"
  
- name: postgresql
  section: db
  type: gentoo-image-builder
  requires:
  - base
  build:
    entrypoint: ["/usr/bin/postgres"]
    user: postgres
    packages: ="{{ software.postgresql.latest.params.repo }}"-"{{ software.postgresql.version }}"
    finish_rootfs_build: |
      ln -s usr/lib "${ROOT}/lib" && copy_gcc_libs
      (cd ${ROOT}; for f in usr/lib/postgresql*/bin/*; do ln -s /$f usr/bin/; done)
      mkdir -p -m 3777 ${ROOT}/run/postgresql && chown postgres ${ROOT}/run/postgresql
    
- name: go
  tag: 2025.05-1
  section: local
  type: gentoo-image-builder
  requires:
  - base
  build:
    configure_builder: emerge dev-lang/go
    configure_rootfs_build: touch "${ROOT}/ready2go"
      
- name: hydra
  section: auth
  type: gentoo-image-builder
  requires:
  - go
  build:
    configure_rootfs_build: |
      git clone --branch "{{ software.hydra.version }}" --depth 1 --filter=blob:none  https://github.com/ory/hydra.git
      cd hydra
      go build -tags sqlite,sqlite_omit_load_extension .
      strip hydra
      mkdir "${ROOT}/bin"
      mv hydra "${ROOT}/bin/"

- name: descheduler
  section: kube-system
  type: gentoo-image-builder
  requires:
  - go
  build:
    configure_rootfs_build: |
      git clone --branch "{{ software.descheduler.version }}" --depth 1 --filter=blob:none https://github.com/kubernetes-sigs/descheduler.git
      cd descheduler
      make
      strip ./_output/bin/descheduler
      mkdir "${ROOT}/bin"
      mv  ./_output/bin/descheduler "${ROOT}/bin/"

- name: traefik
  section: gateway
  type: gentoo-image-builder
  requires:
  - go
  build:
    configure_builder: |
      echo "net-libs/nodejs npm corepack" > /etc/portage/package.use/97nodejs.conf
      emerge net-libs/nodejs
    configure_rootfs_build: |
      git clone --depth 1 --single-branch -b "{{ software.traefik.version }}" https://github.com/traefik/traefik.git
      set -x
      cd traefik/webui
      corepack enable
      sed -i -e 's/^}$/,"optionalDependencies": {"@rollup\/rollup-linux-x64-musl": "4.9.5"}}/g' package.json
      yarn workspaces focus --all --production
      echo "Y" | yarn install
      npm i
      yarn install
      yarn build
      cd ..
      (go run ./cmd/internal/gen/ || true)
      (./script/code-gen.sh || true)
      go generate
      go build -ldflags "-w -s" ./cmd/traefik
    finish_rootfs_build: |
      mkdir -p "${ROOT}/bin" && cp -dp ./traefik "${ROOT}/bin"

- name: oauth2-proxy
  section: auth
  type: gentoo-image-builder
  requires:
  - go
  build:
    entrypoint: ["/bin/oauth2-proxy"]
    configure_rootfs_build: |
      git clone -b "{{ software['oauth2-proxy'].version }}" https://github.com/oauth2-proxy/oauth2-proxy.git
      cd oauth2-proxy
      go build
      strip  oauth2-proxy
      mkdir "${ROOT}/bin"
      mv oauth2-proxy "${ROOT}/bin/"
      cd && rm -rf /oauth2-proxy /root/.??* /root/*

- name: registry
  section: local
  type: gentoo-image-builder
  requires:
  - go
  build:
    entrypoint: ["/bin/registry"]
    configure_rootfs_build: |
      git clone -b "{{ software.registry.version }}" https://github.com/distribution/distribution.git
      cd distribution
      make bin/registry
      strip bin/registry
      mkdir "${ROOT}/bin"
      mv bin/registry "${ROOT}/bin/"
      cd ..
      rm -rf distribution /root/.??* /root/*

- name: nodejs
  tag: "{{ builder.portage }}"
  section: local
  type: gentoo-image-builder
  env:
     XXXLDFLAGS: "-static-libgcc -static-libstdc++"
  requires:
  - base
  build:
    packages: net-libs/nodejs
    configure_builder: |
      echo "net-libs/nodejs npm" >> /etc/portage/package.use/97nodejs.conf
      echo "dev-lang/typescript ~arm64" > /etc/portage/package.accept_keywords/ts.conf && cat /etc/portage/package.accept_keywords/ts.conf
      emerge net-libs/nodejs dev-lang/typescript
    configure_rootfs_build: |
      #provide_package sys-devel/gcc
      ln -s usr/lib "${ROOT}/lib"
    finish_rootfs_build: |
      ln -s ../../bin/env "${ROOT}/usr/bin/env"

- name: idp
  tag: 2025.3
  section: auth
  type: gentoo-image-builder
  requires:
  - nodejs
  workdir: /app
  build:
    entrypoint: ["/bin/sh", "-c", "npm run serve"]
    configure_rootfs_build: |
      git=$(basename "{{ own_git_url }}" | sed -e 's/\.git$//g')
      git clone --branch master --depth 1 --filter=blob:none --sparse "{{ own_git_url }}"
      ( cd "${git}" && git sparse-checkout set hydra-login-consent-node
        mkdir "${ROOT}/app" && mv  hydra-login-consent-node/* "${ROOT}/app/"
      ) && rm -rf "${git}"
    finish_rootfs_build: |
      cd "${ROOT}/app/"
      npm ci && npm run build
      npm prune --omit=dev

- name: zigbee2mqtt
  section: home
  type: gentoo-image-builder
  requires:
  - nodejs
  workdir: /app
  env:
    HOME: /app
    PATH: /app/bin:/bin:/usr/bin
  build:
    entrypoint: ["/bin/sh", "-c", "node index.js"]
    configure_rootfs_build: |
      git clone --branch {{ software.zigbee2mqtt.version }} --depth 1 https://github.com/Koenkk/zigbee2mqtt.git "${ROOT}/app"
    finish_rootfs_build: |
      cd "${ROOT}/app/"
      mkdir log
      npm install
      npm run build
      npm rebuild --build-from-source # otherwise segfault- to be tested: cannot it be merge with previous commands?
      npm prune --omit=dev --omit=optional

- name: helm
  type: gentoo-image-builder
  requires:
  - go
  section: local
  build:
    packages: "=app-admin/helm-{{ software.helm.version }} app-misc/yq"
    configure_rootfs_build: |
      echo "=app-admin/helm-{{ software.helm.version }} ~arm64" > /etc/portage/package.accept_keywords/helm.conf && cat /etc/portage/package.accept_keywords/helm.conf
      echo "=app-admin/helm-{{ software.helm.version }}" > /etc/portage/package.unmask/helm.conf && cat /etc/portage/package.unmask/helm.conf
      #equery --quiet --no-color --no-pipe list sys-devel/gcc >> /etc/portage/profile/package.provided
      ln -s usr/lib "${ROOT}/lib"
    finish_rootfs_build: strip "${ROOT}/usr/bin/helm"
  
- name: python3
  tag: 2025.09-2
  section: local
  requires:
  - base
  env:
    LD_LIBRARY_PATH: /usr/local/lib
  type: gentoo-image-builder
  build:
    packages: "dev-python/packaging dev-python/gpep517"
    Xconfigure_builder: emerge dev-python/pip
    configure_rootfs_build: |
      echo "*/* sqlite" >> /etc/portage/package.use/builder.conf
      # provide_package sys-devel/gcc
      ln -s usr/lib "${ROOT}/lib"
      # add user/group for unprivileged container usage
      groupadd -g 404 python
      useradd -u 4004 -g python -d /home/python python
      mkdir -p "${ROOT}"/home/python
    finish_rootfs_build: mkdir -p "${ROOT}/usr/local/lib"; for lib in $(find /usr/lib/ -name libgomp.so.1); do cp "${lib}" "${ROOT}/usr/local/lib"; done

- name: ha-base
  tag: 2025.10
  section: home
  requires:
  - python3
  type: gentoo-image-builder
  build:
    packages: "app-misc/jq app-crypt/gnupg dev-python/jinja2 dev-python/idna dev-python/certifi dev-python/requests dev-python/python-dateutil"
    run_with: python3 -m homeassistant --config /config --log-file /tmp/log --skip-pip

- name: home-assistant
  section: home
  requires:
  - ha-base
  type: gentoo-image-builder
  build:
    packages: dev-db/postgresql
    configure_builder: |
      sed -i -e '/oniguruma/d' -e '/jq/d' /etc/portage/profile/package.provided
      emerge app-misc/jq 
    configure_rootfs_build: |
      set -x
      HA_DIR=/ha && mkdir -p ${ROOT}/${HA_DIR} && ln -s ${ROOT}/${HA_DIR} ${HA_DIR}
      ( cd ${ROOT}/${HA_DIR}; 
          git clone --depth=1 -b "{{ software['home-assistant'].version }}" https://github.com/home-assistant/core.git
          cd core
          for package in home-assistant-frontend pyotp PyQRCode paho-mqtt hassil numpy mutagen; do # pyudev; do
            grep -q "${package}==" requirements.txt  || grep "^${package}==" requirements_all.txt >> requirements.txt
          done
          for package in home_assistant_intents PyTurboJPEG; do
            echo "${package}" >> requirements.txt
          done
            
          for f in requirements.txt homeassistant/package_constraints.txt pyproject.toml homeassistant/helpers/network.py; do
            sed -i -e "/hass-nabucasa/d" -e "/hass_nabucasa/d" "${f}"
          done
          sed -i -e "/hass_nabucasa/d" -e "s#remote.is_cloud_request.get()#False#" homeassistant/components/http/forwarded.py
            
          # remove from default configuration
          cp -dp homeassistant/components/default_config/manifest.json homeassistant/components/default_config/manifest.json.org
          jq  -a 'del(.dependencies[] | select(. == ("assist_pipeline","stream","go2rtc","cloud","conversation","zeroconf","usb","ssdp","dhcp","mobile_app","bluetooth") ) )' homeassistant/components/default_config/manifest.json.org > homeassistant/components/default_config/manifest.json
      )
      
      VIRTUAL_ENV=/py_env
      python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate
      pip install -r ${HA_DIR}/core/requirements.txt 2>&1 | tee ${ROOT}/py_env.log
      set +x
    finish_rootfs_build: |
      VIRTUAL_ENV=/py_env
      . "$VIRTUAL_ENV"/bin/activate
      ln -s ${ROOT}/usr/bin/pg_config17 /usr/bin/pg_config
      pip install psycopg2
      find /py_env -name '*.so*' -exec strip {} \;
      pip uninstall --yes uv
      mv "$VIRTUAL_ENV" ${ROOT}/"$VIRTUAL_ENV"

- name: mosquitto
  section: home
  requires:
  - base
  type: gentoo-image-builder
  build:
    entrypoint: ["/mosquitto/sbin/mosquitto", "-c", "/mosquitto/config/mosquitto.conf" ]
    packages: dev-libs/cJSON dev-libs/openssl net-libs/libwebsockets net-libs/libwebsockets
    finish_rootfs_build: |
      git clone --depth=1 -b "{{ software.mosquitto.version }}" https://github.com/eclipse-mosquitto/mosquitto.git
      mv mosquitto src && cd src
      sed -i -e 's#/usr/local#/mosquitto#g' config.mk
      export CFLAGS="-I${ROOT}/usr/include"
      export LDFLAGS="-L${ROOT}/usr/lib"
      make install WITH_DOCS=no WITH_WEBSOCKETS=yes
      mv /mosquitto ${ROOT}/mosquitto
      echo "mosquitto:x:1883:" >> ${ROOT}/etc/group
      echo "mosquitto:x:1883:1883:mosquitto:/var/empty:/sbin/nologin" >> ${ROOT}/etc/passwd
      strip ${ROOT}/usr/lib/* ${ROOT}/usr/bin/* ${ROOT}/usr/sbin/* || true

- name: bazel
  tag: 2025.02-1
  section: local
  requires:
  - python3
  type: gentoo-image-builder
  build:
    packages: app-arch/zip virtual/jdk
    configure_rootfs_build: |
      git clone --depth=1 -b "8.1.1" https://github.com/bazelbuild/bazel.git
      cd bazel
      env EXTRA_BAZEL_ARGS="--tool_java_runtime_version=local_jdk" bash ./compile.sh.
 
- name: auth-operator
  tag: 2025.04
  section: auth
  requires:
  - python3
  type: gentoo-image-builder
  build:
    packages: dev-python/idna dev-python/urllib3 dev-python/certifi dev-python/requests
    finish_rootfs_build: |
      VIRTUAL_ENV=/py_env
      python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate && pip install fastapi uvicorn kopf kubernetes
      mv "$VIRTUAL_ENV" ${ROOT}/"$VIRTUAL_ENV"
      
- name: fastapi
  tag: 2025.06-1
  section: local
  requires:
  - python3
  type: gentoo-image-builder
  build:
    packages: dev-python/uvicorn net-misc/curl dev-python/jinja2 dev-python/requests dev-python/typing-extensions dev-python/pyyaml 
    finish_rootfs_build: |
      VIRTUAL_ENV=/py_env
      export PYTHONPATH=${VIRTUAL_ENV}/lib/python3.13/site-packages/
      python -m venv --system-site-packages "$VIRTUAL_ENV" && . "$VIRTUAL_ENV"/bin/activate && pip install fastapi kubernetes
      mv  "${VIRTUAL_ENV}" "${ROOT}/${VIRTUAL_ENV}"
